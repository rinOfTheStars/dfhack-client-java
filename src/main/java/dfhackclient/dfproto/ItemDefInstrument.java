// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemDefInstrument.proto

// Protobuf Java Version: 3.25.1
package main.java.dfhackclient.dfproto;

@SuppressWarnings({"deprecation", "unused"})
public final class ItemDefInstrument {
  private ItemDefInstrument() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code ItemDefInstrument.PitchChoiceType}
   */
  public enum PitchChoiceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MEMBRANE_POSITION = 0;</code>
     */
    MEMBRANE_POSITION(0),
    /**
     * <code>SUBPART_CHOICE = 1;</code>
     */
    SUBPART_CHOICE(1),
    /**
     * <code>KEYBOARD = 2;</code>
     */
    KEYBOARD(2),
    /**
     * <code>STOPPING_FRET = 3;</code>
     */
    STOPPING_FRET(3),
    /**
     * <code>STOPPING_AGAINST_BODY = 4;</code>
     */
    STOPPING_AGAINST_BODY(4),
    /**
     * <code>STOPPING_HOLE = 5;</code>
     */
    STOPPING_HOLE(5),
    /**
     * <code>STOPPING_HOLE_KEY = 6;</code>
     */
    STOPPING_HOLE_KEY(6),
    /**
     * <code>SLIDE = 7;</code>
     */
    SLIDE(7),
    /**
     * <code>HARMONIC_SERIES = 8;</code>
     */
    HARMONIC_SERIES(8),
    /**
     * <code>VALVE_ROUTES_AIR = 9;</code>
     */
    VALVE_ROUTES_AIR(9),
    /**
     * <code>BP_IN_BELL = 10;</code>
     */
    BP_IN_BELL(10),
    /**
     * <code>FOOT_PEDALS = 11;</code>
     */
    FOOT_PEDALS(11),
    ;

    /**
     * <code>MEMBRANE_POSITION = 0;</code>
     */
    public static final int MEMBRANE_POSITION_VALUE = 0;
    /**
     * <code>SUBPART_CHOICE = 1;</code>
     */
    public static final int SUBPART_CHOICE_VALUE = 1;
    /**
     * <code>KEYBOARD = 2;</code>
     */
    public static final int KEYBOARD_VALUE = 2;
    /**
     * <code>STOPPING_FRET = 3;</code>
     */
    public static final int STOPPING_FRET_VALUE = 3;
    /**
     * <code>STOPPING_AGAINST_BODY = 4;</code>
     */
    public static final int STOPPING_AGAINST_BODY_VALUE = 4;
    /**
     * <code>STOPPING_HOLE = 5;</code>
     */
    public static final int STOPPING_HOLE_VALUE = 5;
    /**
     * <code>STOPPING_HOLE_KEY = 6;</code>
     */
    public static final int STOPPING_HOLE_KEY_VALUE = 6;
    /**
     * <code>SLIDE = 7;</code>
     */
    public static final int SLIDE_VALUE = 7;
    /**
     * <code>HARMONIC_SERIES = 8;</code>
     */
    public static final int HARMONIC_SERIES_VALUE = 8;
    /**
     * <code>VALVE_ROUTES_AIR = 9;</code>
     */
    public static final int VALVE_ROUTES_AIR_VALUE = 9;
    /**
     * <code>BP_IN_BELL = 10;</code>
     */
    public static final int BP_IN_BELL_VALUE = 10;
    /**
     * <code>FOOT_PEDALS = 11;</code>
     */
    public static final int FOOT_PEDALS_VALUE = 11;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PitchChoiceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PitchChoiceType forNumber(int value) {
      switch (value) {
        case 0: return MEMBRANE_POSITION;
        case 1: return SUBPART_CHOICE;
        case 2: return KEYBOARD;
        case 3: return STOPPING_FRET;
        case 4: return STOPPING_AGAINST_BODY;
        case 5: return STOPPING_HOLE;
        case 6: return STOPPING_HOLE_KEY;
        case 7: return SLIDE;
        case 8: return HARMONIC_SERIES;
        case 9: return VALVE_ROUTES_AIR;
        case 10: return BP_IN_BELL;
        case 11: return FOOT_PEDALS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PitchChoiceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PitchChoiceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PitchChoiceType>() {
            public PitchChoiceType findValueByNumber(int number) {
              return PitchChoiceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return ItemDefInstrument.getDescriptor().getEnumTypes().get(0);
    }

    private static final PitchChoiceType[] VALUES = values();

    public static PitchChoiceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PitchChoiceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ItemDefInstrument.PitchChoiceType)
  }

  /**
   * Protobuf enum {@code ItemDefInstrument.SoundProductionType}
   */
  public enum SoundProductionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PLUCKED_BY_BP = 0;</code>
     */
    PLUCKED_BY_BP(0),
    /**
     * <code>PLUCKED = 1;</code>
     */
    PLUCKED(1),
    /**
     * <code>BOWED = 2;</code>
     */
    BOWED(2),
    /**
     * <code>STRUCK_BY_BP = 3;</code>
     */
    STRUCK_BY_BP(3),
    /**
     * <code>STRUCK = 4;</code>
     */
    STRUCK(4),
    /**
     * <code>VIBRATE_BP_AGAINST_OPENING = 5;</code>
     */
    VIBRATE_BP_AGAINST_OPENING(5),
    /**
     * <code>BLOW_AGAINST_FIPPLE = 6;</code>
     */
    BLOW_AGAINST_FIPPLE(6),
    /**
     * <code>BLOW_OVER_OPENING_SIDE = 7;</code>
     */
    BLOW_OVER_OPENING_SIDE(7),
    /**
     * <code>BLOW_OVER_OPENING_END = 8;</code>
     */
    BLOW_OVER_OPENING_END(8),
    /**
     * <code>BLOW_OVER_SINGLE_REED = 9;</code>
     */
    BLOW_OVER_SINGLE_REED(9),
    /**
     * <code>BLOW_OVER_DOUBLE_REED = 10;</code>
     */
    BLOW_OVER_DOUBLE_REED(10),
    /**
     * <code>BLOW_OVER_FREE_REED = 11;</code>
     */
    BLOW_OVER_FREE_REED(11),
    /**
     * <code>STRUCK_TOGETHER = 12;</code>
     */
    STRUCK_TOGETHER(12),
    /**
     * <code>SHAKEN = 13;</code>
     */
    SHAKEN(13),
    /**
     * <code>SCRAPED = 14;</code>
     */
    SCRAPED(14),
    /**
     * <code>FRICTION = 15;</code>
     */
    FRICTION(15),
    /**
     * <code>RESONATOR = 16;</code>
     */
    RESONATOR(16),
    /**
     * <code>BAG_OVER_REED = 17;</code>
     */
    BAG_OVER_REED(17),
    /**
     * <code>AIR_OVER_REED = 18;</code>
     */
    AIR_OVER_REED(18),
    /**
     * <code>AIR_OVER_FREE_REED = 19;</code>
     */
    AIR_OVER_FREE_REED(19),
    /**
     * <code>AIR_AGAINST_FIPPLE = 20;</code>
     */
    AIR_AGAINST_FIPPLE(20),
    ;

    /**
     * <code>PLUCKED_BY_BP = 0;</code>
     */
    public static final int PLUCKED_BY_BP_VALUE = 0;
    /**
     * <code>PLUCKED = 1;</code>
     */
    public static final int PLUCKED_VALUE = 1;
    /**
     * <code>BOWED = 2;</code>
     */
    public static final int BOWED_VALUE = 2;
    /**
     * <code>STRUCK_BY_BP = 3;</code>
     */
    public static final int STRUCK_BY_BP_VALUE = 3;
    /**
     * <code>STRUCK = 4;</code>
     */
    public static final int STRUCK_VALUE = 4;
    /**
     * <code>VIBRATE_BP_AGAINST_OPENING = 5;</code>
     */
    public static final int VIBRATE_BP_AGAINST_OPENING_VALUE = 5;
    /**
     * <code>BLOW_AGAINST_FIPPLE = 6;</code>
     */
    public static final int BLOW_AGAINST_FIPPLE_VALUE = 6;
    /**
     * <code>BLOW_OVER_OPENING_SIDE = 7;</code>
     */
    public static final int BLOW_OVER_OPENING_SIDE_VALUE = 7;
    /**
     * <code>BLOW_OVER_OPENING_END = 8;</code>
     */
    public static final int BLOW_OVER_OPENING_END_VALUE = 8;
    /**
     * <code>BLOW_OVER_SINGLE_REED = 9;</code>
     */
    public static final int BLOW_OVER_SINGLE_REED_VALUE = 9;
    /**
     * <code>BLOW_OVER_DOUBLE_REED = 10;</code>
     */
    public static final int BLOW_OVER_DOUBLE_REED_VALUE = 10;
    /**
     * <code>BLOW_OVER_FREE_REED = 11;</code>
     */
    public static final int BLOW_OVER_FREE_REED_VALUE = 11;
    /**
     * <code>STRUCK_TOGETHER = 12;</code>
     */
    public static final int STRUCK_TOGETHER_VALUE = 12;
    /**
     * <code>SHAKEN = 13;</code>
     */
    public static final int SHAKEN_VALUE = 13;
    /**
     * <code>SCRAPED = 14;</code>
     */
    public static final int SCRAPED_VALUE = 14;
    /**
     * <code>FRICTION = 15;</code>
     */
    public static final int FRICTION_VALUE = 15;
    /**
     * <code>RESONATOR = 16;</code>
     */
    public static final int RESONATOR_VALUE = 16;
    /**
     * <code>BAG_OVER_REED = 17;</code>
     */
    public static final int BAG_OVER_REED_VALUE = 17;
    /**
     * <code>AIR_OVER_REED = 18;</code>
     */
    public static final int AIR_OVER_REED_VALUE = 18;
    /**
     * <code>AIR_OVER_FREE_REED = 19;</code>
     */
    public static final int AIR_OVER_FREE_REED_VALUE = 19;
    /**
     * <code>AIR_AGAINST_FIPPLE = 20;</code>
     */
    public static final int AIR_AGAINST_FIPPLE_VALUE = 20;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SoundProductionType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SoundProductionType forNumber(int value) {
      switch (value) {
        case 0: return PLUCKED_BY_BP;
        case 1: return PLUCKED;
        case 2: return BOWED;
        case 3: return STRUCK_BY_BP;
        case 4: return STRUCK;
        case 5: return VIBRATE_BP_AGAINST_OPENING;
        case 6: return BLOW_AGAINST_FIPPLE;
        case 7: return BLOW_OVER_OPENING_SIDE;
        case 8: return BLOW_OVER_OPENING_END;
        case 9: return BLOW_OVER_SINGLE_REED;
        case 10: return BLOW_OVER_DOUBLE_REED;
        case 11: return BLOW_OVER_FREE_REED;
        case 12: return STRUCK_TOGETHER;
        case 13: return SHAKEN;
        case 14: return SCRAPED;
        case 15: return FRICTION;
        case 16: return RESONATOR;
        case 17: return BAG_OVER_REED;
        case 18: return AIR_OVER_REED;
        case 19: return AIR_OVER_FREE_REED;
        case 20: return AIR_AGAINST_FIPPLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SoundProductionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SoundProductionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SoundProductionType>() {
            public SoundProductionType findValueByNumber(int number) {
              return SoundProductionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return ItemDefInstrument.getDescriptor().getEnumTypes().get(1);
    }

    private static final SoundProductionType[] VALUES = values();

    public static SoundProductionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SoundProductionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ItemDefInstrument.SoundProductionType)
  }

  /**
   * Protobuf enum {@code ItemDefInstrument.TuningType}
   */
  public enum TuningType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PEGS = 0;</code>
     */
    PEGS(0),
    /**
     * <code>ADJUSTABLE_BRIDGES = 1;</code>
     */
    ADJUSTABLE_BRIDGES(1),
    /**
     * <code>CROOKS = 2;</code>
     */
    CROOKS(2),
    /**
     * <code>TIGHTENING = 3;</code>
     */
    TIGHTENING(3),
    /**
     * <code>LEVERS = 4;</code>
     */
    LEVERS(4),
    ;

    /**
     * <code>PEGS = 0;</code>
     */
    public static final int PEGS_VALUE = 0;
    /**
     * <code>ADJUSTABLE_BRIDGES = 1;</code>
     */
    public static final int ADJUSTABLE_BRIDGES_VALUE = 1;
    /**
     * <code>CROOKS = 2;</code>
     */
    public static final int CROOKS_VALUE = 2;
    /**
     * <code>TIGHTENING = 3;</code>
     */
    public static final int TIGHTENING_VALUE = 3;
    /**
     * <code>LEVERS = 4;</code>
     */
    public static final int LEVERS_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TuningType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TuningType forNumber(int value) {
      switch (value) {
        case 0: return PEGS;
        case 1: return ADJUSTABLE_BRIDGES;
        case 2: return CROOKS;
        case 3: return TIGHTENING;
        case 4: return LEVERS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TuningType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TuningType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TuningType>() {
            public TuningType findValueByNumber(int number) {
              return TuningType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return ItemDefInstrument.getDescriptor().getEnumTypes().get(2);
    }

    private static final TuningType[] VALUES = values();

    public static TuningType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TuningType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ItemDefInstrument.TuningType)
  }

  public interface InstrumentFlagsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ItemDefInstrument.InstrumentFlags)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool indefinite_pitch = 1;</code>
     * @return Whether the indefinitePitch field is set.
     */
    boolean hasIndefinitePitch();
    /**
     * <code>optional bool indefinite_pitch = 1;</code>
     * @return The indefinitePitch.
     */
    boolean getIndefinitePitch();

    /**
     * <code>optional bool placed_as_building = 2;</code>
     * @return Whether the placedAsBuilding field is set.
     */
    boolean hasPlacedAsBuilding();
    /**
     * <code>optional bool placed_as_building = 2;</code>
     * @return The placedAsBuilding.
     */
    boolean getPlacedAsBuilding();

    /**
     * <code>optional bool metal_mat = 3;</code>
     * @return Whether the metalMat field is set.
     */
    boolean hasMetalMat();
    /**
     * <code>optional bool metal_mat = 3;</code>
     * @return The metalMat.
     */
    boolean getMetalMat();

    /**
     * <code>optional bool stone_mat = 4;</code>
     * @return Whether the stoneMat field is set.
     */
    boolean hasStoneMat();
    /**
     * <code>optional bool stone_mat = 4;</code>
     * @return The stoneMat.
     */
    boolean getStoneMat();

    /**
     * <code>optional bool wood_mat = 5;</code>
     * @return Whether the woodMat field is set.
     */
    boolean hasWoodMat();
    /**
     * <code>optional bool wood_mat = 5;</code>
     * @return The woodMat.
     */
    boolean getWoodMat();

    /**
     * <code>optional bool glass_mat = 6;</code>
     * @return Whether the glassMat field is set.
     */
    boolean hasGlassMat();
    /**
     * <code>optional bool glass_mat = 6;</code>
     * @return The glassMat.
     */
    boolean getGlassMat();

    /**
     * <code>optional bool ceramic_mat = 7;</code>
     * @return Whether the ceramicMat field is set.
     */
    boolean hasCeramicMat();
    /**
     * <code>optional bool ceramic_mat = 7;</code>
     * @return The ceramicMat.
     */
    boolean getCeramicMat();

    /**
     * <code>optional bool shell_mat = 8;</code>
     * @return Whether the shellMat field is set.
     */
    boolean hasShellMat();
    /**
     * <code>optional bool shell_mat = 8;</code>
     * @return The shellMat.
     */
    boolean getShellMat();

    /**
     * <code>optional bool bone_mat = 9;</code>
     * @return Whether the boneMat field is set.
     */
    boolean hasBoneMat();
    /**
     * <code>optional bool bone_mat = 9;</code>
     * @return The boneMat.
     */
    boolean getBoneMat();
  }
  /**
   * Protobuf type {@code ItemDefInstrument.InstrumentFlags}
   */
  public static final class InstrumentFlags extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ItemDefInstrument.InstrumentFlags)
      InstrumentFlagsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstrumentFlags.newBuilder() to construct.
    private InstrumentFlags(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstrumentFlags() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InstrumentFlags();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentFlags_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentFlags_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ItemDefInstrument.InstrumentFlags.class, ItemDefInstrument.InstrumentFlags.Builder.class);
    }

    private int bitField0_;
    public static final int INDEFINITE_PITCH_FIELD_NUMBER = 1;
    private boolean indefinitePitch_ = false;
    /**
     * <code>optional bool indefinite_pitch = 1;</code>
     * @return Whether the indefinitePitch field is set.
     */
    @java.lang.Override
    public boolean hasIndefinitePitch() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional bool indefinite_pitch = 1;</code>
     * @return The indefinitePitch.
     */
    @java.lang.Override
    public boolean getIndefinitePitch() {
      return indefinitePitch_;
    }

    public static final int PLACED_AS_BUILDING_FIELD_NUMBER = 2;
    private boolean placedAsBuilding_ = false;
    /**
     * <code>optional bool placed_as_building = 2;</code>
     * @return Whether the placedAsBuilding field is set.
     */
    @java.lang.Override
    public boolean hasPlacedAsBuilding() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional bool placed_as_building = 2;</code>
     * @return The placedAsBuilding.
     */
    @java.lang.Override
    public boolean getPlacedAsBuilding() {
      return placedAsBuilding_;
    }

    public static final int METAL_MAT_FIELD_NUMBER = 3;
    private boolean metalMat_ = false;
    /**
     * <code>optional bool metal_mat = 3;</code>
     * @return Whether the metalMat field is set.
     */
    @java.lang.Override
    public boolean hasMetalMat() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional bool metal_mat = 3;</code>
     * @return The metalMat.
     */
    @java.lang.Override
    public boolean getMetalMat() {
      return metalMat_;
    }

    public static final int STONE_MAT_FIELD_NUMBER = 4;
    private boolean stoneMat_ = false;
    /**
     * <code>optional bool stone_mat = 4;</code>
     * @return Whether the stoneMat field is set.
     */
    @java.lang.Override
    public boolean hasStoneMat() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional bool stone_mat = 4;</code>
     * @return The stoneMat.
     */
    @java.lang.Override
    public boolean getStoneMat() {
      return stoneMat_;
    }

    public static final int WOOD_MAT_FIELD_NUMBER = 5;
    private boolean woodMat_ = false;
    /**
     * <code>optional bool wood_mat = 5;</code>
     * @return Whether the woodMat field is set.
     */
    @java.lang.Override
    public boolean hasWoodMat() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional bool wood_mat = 5;</code>
     * @return The woodMat.
     */
    @java.lang.Override
    public boolean getWoodMat() {
      return woodMat_;
    }

    public static final int GLASS_MAT_FIELD_NUMBER = 6;
    private boolean glassMat_ = false;
    /**
     * <code>optional bool glass_mat = 6;</code>
     * @return Whether the glassMat field is set.
     */
    @java.lang.Override
    public boolean hasGlassMat() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional bool glass_mat = 6;</code>
     * @return The glassMat.
     */
    @java.lang.Override
    public boolean getGlassMat() {
      return glassMat_;
    }

    public static final int CERAMIC_MAT_FIELD_NUMBER = 7;
    private boolean ceramicMat_ = false;
    /**
     * <code>optional bool ceramic_mat = 7;</code>
     * @return Whether the ceramicMat field is set.
     */
    @java.lang.Override
    public boolean hasCeramicMat() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional bool ceramic_mat = 7;</code>
     * @return The ceramicMat.
     */
    @java.lang.Override
    public boolean getCeramicMat() {
      return ceramicMat_;
    }

    public static final int SHELL_MAT_FIELD_NUMBER = 8;
    private boolean shellMat_ = false;
    /**
     * <code>optional bool shell_mat = 8;</code>
     * @return Whether the shellMat field is set.
     */
    @java.lang.Override
    public boolean hasShellMat() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional bool shell_mat = 8;</code>
     * @return The shellMat.
     */
    @java.lang.Override
    public boolean getShellMat() {
      return shellMat_;
    }

    public static final int BONE_MAT_FIELD_NUMBER = 9;
    private boolean boneMat_ = false;
    /**
     * <code>optional bool bone_mat = 9;</code>
     * @return Whether the boneMat field is set.
     */
    @java.lang.Override
    public boolean hasBoneMat() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional bool bone_mat = 9;</code>
     * @return The boneMat.
     */
    @java.lang.Override
    public boolean getBoneMat() {
      return boneMat_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, indefinitePitch_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, placedAsBuilding_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, metalMat_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(4, stoneMat_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(5, woodMat_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(6, glassMat_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeBool(7, ceramicMat_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeBool(8, shellMat_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeBool(9, boneMat_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, indefinitePitch_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, placedAsBuilding_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, metalMat_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, stoneMat_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, woodMat_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, glassMat_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, ceramicMat_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, shellMat_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, boneMat_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ItemDefInstrument.InstrumentFlags)) {
        return super.equals(obj);
      }
      ItemDefInstrument.InstrumentFlags other = (ItemDefInstrument.InstrumentFlags) obj;

      if (hasIndefinitePitch() != other.hasIndefinitePitch()) return false;
      if (hasIndefinitePitch()) {
        if (getIndefinitePitch()
            != other.getIndefinitePitch()) return false;
      }
      if (hasPlacedAsBuilding() != other.hasPlacedAsBuilding()) return false;
      if (hasPlacedAsBuilding()) {
        if (getPlacedAsBuilding()
            != other.getPlacedAsBuilding()) return false;
      }
      if (hasMetalMat() != other.hasMetalMat()) return false;
      if (hasMetalMat()) {
        if (getMetalMat()
            != other.getMetalMat()) return false;
      }
      if (hasStoneMat() != other.hasStoneMat()) return false;
      if (hasStoneMat()) {
        if (getStoneMat()
            != other.getStoneMat()) return false;
      }
      if (hasWoodMat() != other.hasWoodMat()) return false;
      if (hasWoodMat()) {
        if (getWoodMat()
            != other.getWoodMat()) return false;
      }
      if (hasGlassMat() != other.hasGlassMat()) return false;
      if (hasGlassMat()) {
        if (getGlassMat()
            != other.getGlassMat()) return false;
      }
      if (hasCeramicMat() != other.hasCeramicMat()) return false;
      if (hasCeramicMat()) {
        if (getCeramicMat()
            != other.getCeramicMat()) return false;
      }
      if (hasShellMat() != other.hasShellMat()) return false;
      if (hasShellMat()) {
        if (getShellMat()
            != other.getShellMat()) return false;
      }
      if (hasBoneMat() != other.hasBoneMat()) return false;
      if (hasBoneMat()) {
        if (getBoneMat()
            != other.getBoneMat()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIndefinitePitch()) {
        hash = (37 * hash) + INDEFINITE_PITCH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIndefinitePitch());
      }
      if (hasPlacedAsBuilding()) {
        hash = (37 * hash) + PLACED_AS_BUILDING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getPlacedAsBuilding());
      }
      if (hasMetalMat()) {
        hash = (37 * hash) + METAL_MAT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getMetalMat());
      }
      if (hasStoneMat()) {
        hash = (37 * hash) + STONE_MAT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getStoneMat());
      }
      if (hasWoodMat()) {
        hash = (37 * hash) + WOOD_MAT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getWoodMat());
      }
      if (hasGlassMat()) {
        hash = (37 * hash) + GLASS_MAT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getGlassMat());
      }
      if (hasCeramicMat()) {
        hash = (37 * hash) + CERAMIC_MAT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getCeramicMat());
      }
      if (hasShellMat()) {
        hash = (37 * hash) + SHELL_MAT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getShellMat());
      }
      if (hasBoneMat()) {
        hash = (37 * hash) + BONE_MAT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBoneMat());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ItemDefInstrument.InstrumentFlags parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentFlags parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentFlags parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentFlags parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentFlags parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentFlags parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentFlags parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ItemDefInstrument.InstrumentFlags parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static ItemDefInstrument.InstrumentFlags parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static ItemDefInstrument.InstrumentFlags parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentFlags parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ItemDefInstrument.InstrumentFlags parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ItemDefInstrument.InstrumentFlags prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ItemDefInstrument.InstrumentFlags}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ItemDefInstrument.InstrumentFlags)
        ItemDefInstrument.InstrumentFlagsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentFlags_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentFlags_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ItemDefInstrument.InstrumentFlags.class, ItemDefInstrument.InstrumentFlags.Builder.class);
      }

      // Construct using ItemDefInstrument.InstrumentFlags.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        indefinitePitch_ = false;
        placedAsBuilding_ = false;
        metalMat_ = false;
        stoneMat_ = false;
        woodMat_ = false;
        glassMat_ = false;
        ceramicMat_ = false;
        shellMat_ = false;
        boneMat_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentFlags_descriptor;
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentFlags getDefaultInstanceForType() {
        return ItemDefInstrument.InstrumentFlags.getDefaultInstance();
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentFlags build() {
        ItemDefInstrument.InstrumentFlags result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentFlags buildPartial() {
        ItemDefInstrument.InstrumentFlags result = new ItemDefInstrument.InstrumentFlags(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(ItemDefInstrument.InstrumentFlags result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.indefinitePitch_ = indefinitePitch_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.placedAsBuilding_ = placedAsBuilding_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.metalMat_ = metalMat_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.stoneMat_ = stoneMat_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.woodMat_ = woodMat_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.glassMat_ = glassMat_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.ceramicMat_ = ceramicMat_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.shellMat_ = shellMat_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.boneMat_ = boneMat_;
          to_bitField0_ |= 0x00000100;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ItemDefInstrument.InstrumentFlags) {
          return mergeFrom((ItemDefInstrument.InstrumentFlags)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ItemDefInstrument.InstrumentFlags other) {
        if (other == ItemDefInstrument.InstrumentFlags.getDefaultInstance()) return this;
        if (other.hasIndefinitePitch()) {
          setIndefinitePitch(other.getIndefinitePitch());
        }
        if (other.hasPlacedAsBuilding()) {
          setPlacedAsBuilding(other.getPlacedAsBuilding());
        }
        if (other.hasMetalMat()) {
          setMetalMat(other.getMetalMat());
        }
        if (other.hasStoneMat()) {
          setStoneMat(other.getStoneMat());
        }
        if (other.hasWoodMat()) {
          setWoodMat(other.getWoodMat());
        }
        if (other.hasGlassMat()) {
          setGlassMat(other.getGlassMat());
        }
        if (other.hasCeramicMat()) {
          setCeramicMat(other.getCeramicMat());
        }
        if (other.hasShellMat()) {
          setShellMat(other.getShellMat());
        }
        if (other.hasBoneMat()) {
          setBoneMat(other.getBoneMat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                indefinitePitch_ = input.readBool();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                placedAsBuilding_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                metalMat_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                stoneMat_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                woodMat_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                glassMat_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                ceramicMat_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                shellMat_ = input.readBool();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                boneMat_ = input.readBool();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private boolean indefinitePitch_ ;
      /**
       * <code>optional bool indefinite_pitch = 1;</code>
       * @return Whether the indefinitePitch field is set.
       */
      @java.lang.Override
      public boolean hasIndefinitePitch() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional bool indefinite_pitch = 1;</code>
       * @return The indefinitePitch.
       */
      @java.lang.Override
      public boolean getIndefinitePitch() {
        return indefinitePitch_;
      }
      /**
       * <code>optional bool indefinite_pitch = 1;</code>
       * @param value The indefinitePitch to set.
       * @return This builder for chaining.
       */
      public Builder setIndefinitePitch(boolean value) {

        indefinitePitch_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool indefinite_pitch = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIndefinitePitch() {
        bitField0_ = (bitField0_ & ~0x00000001);
        indefinitePitch_ = false;
        onChanged();
        return this;
      }

      private boolean placedAsBuilding_ ;
      /**
       * <code>optional bool placed_as_building = 2;</code>
       * @return Whether the placedAsBuilding field is set.
       */
      @java.lang.Override
      public boolean hasPlacedAsBuilding() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional bool placed_as_building = 2;</code>
       * @return The placedAsBuilding.
       */
      @java.lang.Override
      public boolean getPlacedAsBuilding() {
        return placedAsBuilding_;
      }
      /**
       * <code>optional bool placed_as_building = 2;</code>
       * @param value The placedAsBuilding to set.
       * @return This builder for chaining.
       */
      public Builder setPlacedAsBuilding(boolean value) {

        placedAsBuilding_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool placed_as_building = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPlacedAsBuilding() {
        bitField0_ = (bitField0_ & ~0x00000002);
        placedAsBuilding_ = false;
        onChanged();
        return this;
      }

      private boolean metalMat_ ;
      /**
       * <code>optional bool metal_mat = 3;</code>
       * @return Whether the metalMat field is set.
       */
      @java.lang.Override
      public boolean hasMetalMat() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional bool metal_mat = 3;</code>
       * @return The metalMat.
       */
      @java.lang.Override
      public boolean getMetalMat() {
        return metalMat_;
      }
      /**
       * <code>optional bool metal_mat = 3;</code>
       * @param value The metalMat to set.
       * @return This builder for chaining.
       */
      public Builder setMetalMat(boolean value) {

        metalMat_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool metal_mat = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetalMat() {
        bitField0_ = (bitField0_ & ~0x00000004);
        metalMat_ = false;
        onChanged();
        return this;
      }

      private boolean stoneMat_ ;
      /**
       * <code>optional bool stone_mat = 4;</code>
       * @return Whether the stoneMat field is set.
       */
      @java.lang.Override
      public boolean hasStoneMat() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional bool stone_mat = 4;</code>
       * @return The stoneMat.
       */
      @java.lang.Override
      public boolean getStoneMat() {
        return stoneMat_;
      }
      /**
       * <code>optional bool stone_mat = 4;</code>
       * @param value The stoneMat to set.
       * @return This builder for chaining.
       */
      public Builder setStoneMat(boolean value) {

        stoneMat_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool stone_mat = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearStoneMat() {
        bitField0_ = (bitField0_ & ~0x00000008);
        stoneMat_ = false;
        onChanged();
        return this;
      }

      private boolean woodMat_ ;
      /**
       * <code>optional bool wood_mat = 5;</code>
       * @return Whether the woodMat field is set.
       */
      @java.lang.Override
      public boolean hasWoodMat() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional bool wood_mat = 5;</code>
       * @return The woodMat.
       */
      @java.lang.Override
      public boolean getWoodMat() {
        return woodMat_;
      }
      /**
       * <code>optional bool wood_mat = 5;</code>
       * @param value The woodMat to set.
       * @return This builder for chaining.
       */
      public Builder setWoodMat(boolean value) {

        woodMat_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool wood_mat = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearWoodMat() {
        bitField0_ = (bitField0_ & ~0x00000010);
        woodMat_ = false;
        onChanged();
        return this;
      }

      private boolean glassMat_ ;
      /**
       * <code>optional bool glass_mat = 6;</code>
       * @return Whether the glassMat field is set.
       */
      @java.lang.Override
      public boolean hasGlassMat() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional bool glass_mat = 6;</code>
       * @return The glassMat.
       */
      @java.lang.Override
      public boolean getGlassMat() {
        return glassMat_;
      }
      /**
       * <code>optional bool glass_mat = 6;</code>
       * @param value The glassMat to set.
       * @return This builder for chaining.
       */
      public Builder setGlassMat(boolean value) {

        glassMat_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool glass_mat = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearGlassMat() {
        bitField0_ = (bitField0_ & ~0x00000020);
        glassMat_ = false;
        onChanged();
        return this;
      }

      private boolean ceramicMat_ ;
      /**
       * <code>optional bool ceramic_mat = 7;</code>
       * @return Whether the ceramicMat field is set.
       */
      @java.lang.Override
      public boolean hasCeramicMat() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional bool ceramic_mat = 7;</code>
       * @return The ceramicMat.
       */
      @java.lang.Override
      public boolean getCeramicMat() {
        return ceramicMat_;
      }
      /**
       * <code>optional bool ceramic_mat = 7;</code>
       * @param value The ceramicMat to set.
       * @return This builder for chaining.
       */
      public Builder setCeramicMat(boolean value) {

        ceramicMat_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool ceramic_mat = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearCeramicMat() {
        bitField0_ = (bitField0_ & ~0x00000040);
        ceramicMat_ = false;
        onChanged();
        return this;
      }

      private boolean shellMat_ ;
      /**
       * <code>optional bool shell_mat = 8;</code>
       * @return Whether the shellMat field is set.
       */
      @java.lang.Override
      public boolean hasShellMat() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional bool shell_mat = 8;</code>
       * @return The shellMat.
       */
      @java.lang.Override
      public boolean getShellMat() {
        return shellMat_;
      }
      /**
       * <code>optional bool shell_mat = 8;</code>
       * @param value The shellMat to set.
       * @return This builder for chaining.
       */
      public Builder setShellMat(boolean value) {

        shellMat_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool shell_mat = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearShellMat() {
        bitField0_ = (bitField0_ & ~0x00000080);
        shellMat_ = false;
        onChanged();
        return this;
      }

      private boolean boneMat_ ;
      /**
       * <code>optional bool bone_mat = 9;</code>
       * @return Whether the boneMat field is set.
       */
      @java.lang.Override
      public boolean hasBoneMat() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional bool bone_mat = 9;</code>
       * @return The boneMat.
       */
      @java.lang.Override
      public boolean getBoneMat() {
        return boneMat_;
      }
      /**
       * <code>optional bool bone_mat = 9;</code>
       * @param value The boneMat to set.
       * @return This builder for chaining.
       */
      public Builder setBoneMat(boolean value) {

        boneMat_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool bone_mat = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearBoneMat() {
        bitField0_ = (bitField0_ & ~0x00000100);
        boneMat_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ItemDefInstrument.InstrumentFlags)
    }

    // @@protoc_insertion_point(class_scope:ItemDefInstrument.InstrumentFlags)
    private static final ItemDefInstrument.InstrumentFlags DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ItemDefInstrument.InstrumentFlags();
    }

    public static ItemDefInstrument.InstrumentFlags getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<InstrumentFlags>
        PARSER = new com.google.protobuf.AbstractParser<InstrumentFlags>() {
      @java.lang.Override
      public InstrumentFlags parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<InstrumentFlags> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstrumentFlags> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public ItemDefInstrument.InstrumentFlags getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstrumentPieceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ItemDefInstrument.InstrumentPiece)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string type = 1;</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>optional string type = 1;</code>
     * @return The type.
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 1;</code>
     * @return The bytes for type.
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <code>optional string id = 2;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <code>optional string id = 2;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <code>optional string id = 2;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>optional string name = 3;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>optional string name = 3;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 3;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional string name_plural = 4;</code>
     * @return Whether the namePlural field is set.
     */
    boolean hasNamePlural();
    /**
     * <code>optional string name_plural = 4;</code>
     * @return The namePlural.
     */
    java.lang.String getNamePlural();
    /**
     * <code>optional string name_plural = 4;</code>
     * @return The bytes for namePlural.
     */
    com.google.protobuf.ByteString
        getNamePluralBytes();
  }
  /**
   * Protobuf type {@code ItemDefInstrument.InstrumentPiece}
   */
  public static final class InstrumentPiece extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ItemDefInstrument.InstrumentPiece)
      InstrumentPieceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstrumentPiece.newBuilder() to construct.
    private InstrumentPiece(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstrumentPiece() {
      type_ = "";
      id_ = "";
      name_ = "";
      namePlural_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InstrumentPiece();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentPiece_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentPiece_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ItemDefInstrument.InstrumentPiece.class, ItemDefInstrument.InstrumentPiece.Builder.class);
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object type_ = "";
    /**
     * <code>optional string type = 1;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional string type = 1;</code>
     * @return The type.
     */
    @java.lang.Override
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 1;</code>
     * @return The bytes for type.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object id_ = "";
    /**
     * <code>optional string id = 2;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional string id = 2;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string id = 2;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <code>optional string name = 3;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional string name = 3;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 3;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_PLURAL_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object namePlural_ = "";
    /**
     * <code>optional string name_plural = 4;</code>
     * @return Whether the namePlural field is set.
     */
    @java.lang.Override
    public boolean hasNamePlural() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional string name_plural = 4;</code>
     * @return The namePlural.
     */
    @java.lang.Override
    public java.lang.String getNamePlural() {
      java.lang.Object ref = namePlural_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          namePlural_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name_plural = 4;</code>
     * @return The bytes for namePlural.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNamePluralBytes() {
      java.lang.Object ref = namePlural_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namePlural_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, type_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, id_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, namePlural_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, type_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, id_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, namePlural_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ItemDefInstrument.InstrumentPiece)) {
        return super.equals(obj);
      }
      ItemDefInstrument.InstrumentPiece other = (ItemDefInstrument.InstrumentPiece) obj;

      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (!getType()
            .equals(other.getType())) return false;
      }
      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (!getId()
            .equals(other.getId())) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasNamePlural() != other.hasNamePlural()) return false;
      if (hasNamePlural()) {
        if (!getNamePlural()
            .equals(other.getNamePlural())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getType().hashCode();
      }
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasNamePlural()) {
        hash = (37 * hash) + NAME_PLURAL_FIELD_NUMBER;
        hash = (53 * hash) + getNamePlural().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ItemDefInstrument.InstrumentPiece parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentPiece parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentPiece parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentPiece parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentPiece parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentPiece parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentPiece parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ItemDefInstrument.InstrumentPiece parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static ItemDefInstrument.InstrumentPiece parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static ItemDefInstrument.InstrumentPiece parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentPiece parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ItemDefInstrument.InstrumentPiece parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ItemDefInstrument.InstrumentPiece prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ItemDefInstrument.InstrumentPiece}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ItemDefInstrument.InstrumentPiece)
        ItemDefInstrument.InstrumentPieceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentPiece_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentPiece_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ItemDefInstrument.InstrumentPiece.class, ItemDefInstrument.InstrumentPiece.Builder.class);
      }

      // Construct using ItemDefInstrument.InstrumentPiece.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = "";
        id_ = "";
        name_ = "";
        namePlural_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentPiece_descriptor;
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentPiece getDefaultInstanceForType() {
        return ItemDefInstrument.InstrumentPiece.getDefaultInstance();
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentPiece build() {
        ItemDefInstrument.InstrumentPiece result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentPiece buildPartial() {
        ItemDefInstrument.InstrumentPiece result = new ItemDefInstrument.InstrumentPiece(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(ItemDefInstrument.InstrumentPiece result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.id_ = id_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.namePlural_ = namePlural_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ItemDefInstrument.InstrumentPiece) {
          return mergeFrom((ItemDefInstrument.InstrumentPiece)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ItemDefInstrument.InstrumentPiece other) {
        if (other == ItemDefInstrument.InstrumentPiece.getDefaultInstance()) return this;
        if (other.hasType()) {
          type_ = other.type_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasId()) {
          id_ = other.id_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasNamePlural()) {
          namePlural_ = other.namePlural_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                type_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                id_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                name_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                namePlural_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object type_ = "";
      /**
       * <code>optional string type = 1;</code>
       * @return Whether the type field is set.
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional string type = 1;</code>
       * @return The type.
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            type_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 1;</code>
       * @return The bytes for type.
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        type_ = getDefaultInstance().getType();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 1;</code>
       * @param value The bytes for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <code>optional string id = 2;</code>
       * @return Whether the id field is set.
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional string id = 2;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string id = 2;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string id = 2;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        id_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional string id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        id_ = getDefaultInstance().getId();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>optional string id = 2;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        id_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 3;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional string name = 3;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.lang.Object namePlural_ = "";
      /**
       * <code>optional string name_plural = 4;</code>
       * @return Whether the namePlural field is set.
       */
      public boolean hasNamePlural() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional string name_plural = 4;</code>
       * @return The namePlural.
       */
      public java.lang.String getNamePlural() {
        java.lang.Object ref = namePlural_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            namePlural_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name_plural = 4;</code>
       * @return The bytes for namePlural.
       */
      public com.google.protobuf.ByteString
          getNamePluralBytes() {
        java.lang.Object ref = namePlural_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          namePlural_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name_plural = 4;</code>
       * @param value The namePlural to set.
       * @return This builder for chaining.
       */
      public Builder setNamePlural(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        namePlural_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name_plural = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearNamePlural() {
        namePlural_ = getDefaultInstance().getNamePlural();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <code>optional string name_plural = 4;</code>
       * @param value The bytes for namePlural to set.
       * @return This builder for chaining.
       */
      public Builder setNamePluralBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        namePlural_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ItemDefInstrument.InstrumentPiece)
    }

    // @@protoc_insertion_point(class_scope:ItemDefInstrument.InstrumentPiece)
    private static final ItemDefInstrument.InstrumentPiece DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ItemDefInstrument.InstrumentPiece();
    }

    public static ItemDefInstrument.InstrumentPiece getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<InstrumentPiece>
        PARSER = new com.google.protobuf.AbstractParser<InstrumentPiece>() {
      @java.lang.Override
      public InstrumentPiece parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<InstrumentPiece> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstrumentPiece> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public ItemDefInstrument.InstrumentPiece getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstrumentRegisterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ItemDefInstrument.InstrumentRegister)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 pitch_range_min = 1;</code>
     * @return Whether the pitchRangeMin field is set.
     */
    boolean hasPitchRangeMin();
    /**
     * <code>optional int32 pitch_range_min = 1;</code>
     * @return The pitchRangeMin.
     */
    int getPitchRangeMin();

    /**
     * <code>optional int32 pitch_range_max = 2;</code>
     * @return Whether the pitchRangeMax field is set.
     */
    boolean hasPitchRangeMax();
    /**
     * <code>optional int32 pitch_range_max = 2;</code>
     * @return The pitchRangeMax.
     */
    int getPitchRangeMax();
  }
  /**
   * Protobuf type {@code ItemDefInstrument.InstrumentRegister}
   */
  public static final class InstrumentRegister extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ItemDefInstrument.InstrumentRegister)
      InstrumentRegisterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstrumentRegister.newBuilder() to construct.
    private InstrumentRegister(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstrumentRegister() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InstrumentRegister();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentRegister_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentRegister_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ItemDefInstrument.InstrumentRegister.class, ItemDefInstrument.InstrumentRegister.Builder.class);
    }

    private int bitField0_;
    public static final int PITCH_RANGE_MIN_FIELD_NUMBER = 1;
    private int pitchRangeMin_ = 0;
    /**
     * <code>optional int32 pitch_range_min = 1;</code>
     * @return Whether the pitchRangeMin field is set.
     */
    @java.lang.Override
    public boolean hasPitchRangeMin() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 pitch_range_min = 1;</code>
     * @return The pitchRangeMin.
     */
    @java.lang.Override
    public int getPitchRangeMin() {
      return pitchRangeMin_;
    }

    public static final int PITCH_RANGE_MAX_FIELD_NUMBER = 2;
    private int pitchRangeMax_ = 0;
    /**
     * <code>optional int32 pitch_range_max = 2;</code>
     * @return Whether the pitchRangeMax field is set.
     */
    @java.lang.Override
    public boolean hasPitchRangeMax() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 pitch_range_max = 2;</code>
     * @return The pitchRangeMax.
     */
    @java.lang.Override
    public int getPitchRangeMax() {
      return pitchRangeMax_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, pitchRangeMin_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, pitchRangeMax_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, pitchRangeMin_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, pitchRangeMax_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ItemDefInstrument.InstrumentRegister)) {
        return super.equals(obj);
      }
      ItemDefInstrument.InstrumentRegister other = (ItemDefInstrument.InstrumentRegister) obj;

      if (hasPitchRangeMin() != other.hasPitchRangeMin()) return false;
      if (hasPitchRangeMin()) {
        if (getPitchRangeMin()
            != other.getPitchRangeMin()) return false;
      }
      if (hasPitchRangeMax() != other.hasPitchRangeMax()) return false;
      if (hasPitchRangeMax()) {
        if (getPitchRangeMax()
            != other.getPitchRangeMax()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPitchRangeMin()) {
        hash = (37 * hash) + PITCH_RANGE_MIN_FIELD_NUMBER;
        hash = (53 * hash) + getPitchRangeMin();
      }
      if (hasPitchRangeMax()) {
        hash = (37 * hash) + PITCH_RANGE_MAX_FIELD_NUMBER;
        hash = (53 * hash) + getPitchRangeMax();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ItemDefInstrument.InstrumentRegister parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentRegister parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentRegister parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentRegister parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentRegister parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentRegister parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentRegister parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ItemDefInstrument.InstrumentRegister parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static ItemDefInstrument.InstrumentRegister parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static ItemDefInstrument.InstrumentRegister parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentRegister parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ItemDefInstrument.InstrumentRegister parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ItemDefInstrument.InstrumentRegister prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ItemDefInstrument.InstrumentRegister}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ItemDefInstrument.InstrumentRegister)
        ItemDefInstrument.InstrumentRegisterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentRegister_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentRegister_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ItemDefInstrument.InstrumentRegister.class, ItemDefInstrument.InstrumentRegister.Builder.class);
      }

      // Construct using ItemDefInstrument.InstrumentRegister.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        pitchRangeMin_ = 0;
        pitchRangeMax_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentRegister_descriptor;
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentRegister getDefaultInstanceForType() {
        return ItemDefInstrument.InstrumentRegister.getDefaultInstance();
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentRegister build() {
        ItemDefInstrument.InstrumentRegister result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentRegister buildPartial() {
        ItemDefInstrument.InstrumentRegister result = new ItemDefInstrument.InstrumentRegister(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(ItemDefInstrument.InstrumentRegister result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.pitchRangeMin_ = pitchRangeMin_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.pitchRangeMax_ = pitchRangeMax_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ItemDefInstrument.InstrumentRegister) {
          return mergeFrom((ItemDefInstrument.InstrumentRegister)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ItemDefInstrument.InstrumentRegister other) {
        if (other == ItemDefInstrument.InstrumentRegister.getDefaultInstance()) return this;
        if (other.hasPitchRangeMin()) {
          setPitchRangeMin(other.getPitchRangeMin());
        }
        if (other.hasPitchRangeMax()) {
          setPitchRangeMax(other.getPitchRangeMax());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                pitchRangeMin_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                pitchRangeMax_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int pitchRangeMin_ ;
      /**
       * <code>optional int32 pitch_range_min = 1;</code>
       * @return Whether the pitchRangeMin field is set.
       */
      @java.lang.Override
      public boolean hasPitchRangeMin() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 pitch_range_min = 1;</code>
       * @return The pitchRangeMin.
       */
      @java.lang.Override
      public int getPitchRangeMin() {
        return pitchRangeMin_;
      }
      /**
       * <code>optional int32 pitch_range_min = 1;</code>
       * @param value The pitchRangeMin to set.
       * @return This builder for chaining.
       */
      public Builder setPitchRangeMin(int value) {

        pitchRangeMin_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pitch_range_min = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitchRangeMin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pitchRangeMin_ = 0;
        onChanged();
        return this;
      }

      private int pitchRangeMax_ ;
      /**
       * <code>optional int32 pitch_range_max = 2;</code>
       * @return Whether the pitchRangeMax field is set.
       */
      @java.lang.Override
      public boolean hasPitchRangeMax() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int32 pitch_range_max = 2;</code>
       * @return The pitchRangeMax.
       */
      @java.lang.Override
      public int getPitchRangeMax() {
        return pitchRangeMax_;
      }
      /**
       * <code>optional int32 pitch_range_max = 2;</code>
       * @param value The pitchRangeMax to set.
       * @return This builder for chaining.
       */
      public Builder setPitchRangeMax(int value) {

        pitchRangeMax_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pitch_range_max = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitchRangeMax() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pitchRangeMax_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ItemDefInstrument.InstrumentRegister)
    }

    // @@protoc_insertion_point(class_scope:ItemDefInstrument.InstrumentRegister)
    private static final ItemDefInstrument.InstrumentRegister DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ItemDefInstrument.InstrumentRegister();
    }

    public static ItemDefInstrument.InstrumentRegister getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<InstrumentRegister>
        PARSER = new com.google.protobuf.AbstractParser<InstrumentRegister>() {
      @java.lang.Override
      public InstrumentRegister parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<InstrumentRegister> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstrumentRegister> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public ItemDefInstrument.InstrumentRegister getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstrumentDefOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ItemDefInstrument.InstrumentDef)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
     * @return The flags.
     */
    ItemDefInstrument.InstrumentFlags getFlags();
    /**
     * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
     */
    ItemDefInstrument.InstrumentFlagsOrBuilder getFlagsOrBuilder();

    /**
     * <code>optional int32 size = 2;</code>
     * @return Whether the size field is set.
     */
    boolean hasSize();
    /**
     * <code>optional int32 size = 2;</code>
     * @return The size.
     */
    int getSize();

    /**
     * <code>optional int32 value = 3;</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <code>optional int32 value = 3;</code>
     * @return The value.
     */
    int getValue();

    /**
     * <code>optional int32 material_size = 4;</code>
     * @return Whether the materialSize field is set.
     */
    boolean hasMaterialSize();
    /**
     * <code>optional int32 material_size = 4;</code>
     * @return The materialSize.
     */
    int getMaterialSize();

    /**
     * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
     */
    java.util.List<ItemDefInstrument.InstrumentPiece>
        getPiecesList();
    /**
     * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
     */
    ItemDefInstrument.InstrumentPiece getPieces(int index);
    /**
     * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
     */
    int getPiecesCount();
    /**
     * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
     */
    java.util.List<? extends ItemDefInstrument.InstrumentPieceOrBuilder>
        getPiecesOrBuilderList();
    /**
     * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
     */
    ItemDefInstrument.InstrumentPieceOrBuilder getPiecesOrBuilder(
        int index);

    /**
     * <code>optional int32 pitch_range_min = 6;</code>
     * @return Whether the pitchRangeMin field is set.
     */
    boolean hasPitchRangeMin();
    /**
     * <code>optional int32 pitch_range_min = 6;</code>
     * @return The pitchRangeMin.
     */
    int getPitchRangeMin();

    /**
     * <code>optional int32 pitch_range_max = 7;</code>
     * @return Whether the pitchRangeMax field is set.
     */
    boolean hasPitchRangeMax();
    /**
     * <code>optional int32 pitch_range_max = 7;</code>
     * @return The pitchRangeMax.
     */
    int getPitchRangeMax();

    /**
     * <code>optional int32 volume_mb_min = 8;</code>
     * @return Whether the volumeMbMin field is set.
     */
    boolean hasVolumeMbMin();
    /**
     * <code>optional int32 volume_mb_min = 8;</code>
     * @return The volumeMbMin.
     */
    int getVolumeMbMin();

    /**
     * <code>optional int32 volume_mb_max = 9;</code>
     * @return Whether the volumeMbMax field is set.
     */
    boolean hasVolumeMbMax();
    /**
     * <code>optional int32 volume_mb_max = 9;</code>
     * @return The volumeMbMax.
     */
    int getVolumeMbMax();

    /**
     * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
     * @return A list containing the soundProduction.
     */
    java.util.List<ItemDefInstrument.SoundProductionType> getSoundProductionList();
    /**
     * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
     * @return The count of soundProduction.
     */
    int getSoundProductionCount();
    /**
     * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
     * @param index The index of the element to return.
     * @return The soundProduction at the given index.
     */
    ItemDefInstrument.SoundProductionType getSoundProduction(int index);

    /**
     * <code>repeated string sound_production_parm1 = 11;</code>
     * @return A list containing the soundProductionParm1.
     */
    java.util.List<java.lang.String>
        getSoundProductionParm1List();
    /**
     * <code>repeated string sound_production_parm1 = 11;</code>
     * @return The count of soundProductionParm1.
     */
    int getSoundProductionParm1Count();
    /**
     * <code>repeated string sound_production_parm1 = 11;</code>
     * @param index The index of the element to return.
     * @return The soundProductionParm1 at the given index.
     */
    java.lang.String getSoundProductionParm1(int index);
    /**
     * <code>repeated string sound_production_parm1 = 11;</code>
     * @param index The index of the value to return.
     * @return The bytes of the soundProductionParm1 at the given index.
     */
    com.google.protobuf.ByteString
        getSoundProductionParm1Bytes(int index);

    /**
     * <code>repeated string sound_production_parm2 = 12;</code>
     * @return A list containing the soundProductionParm2.
     */
    java.util.List<java.lang.String>
        getSoundProductionParm2List();
    /**
     * <code>repeated string sound_production_parm2 = 12;</code>
     * @return The count of soundProductionParm2.
     */
    int getSoundProductionParm2Count();
    /**
     * <code>repeated string sound_production_parm2 = 12;</code>
     * @param index The index of the element to return.
     * @return The soundProductionParm2 at the given index.
     */
    java.lang.String getSoundProductionParm2(int index);
    /**
     * <code>repeated string sound_production_parm2 = 12;</code>
     * @param index The index of the value to return.
     * @return The bytes of the soundProductionParm2 at the given index.
     */
    com.google.protobuf.ByteString
        getSoundProductionParm2Bytes(int index);

    /**
     * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
     * @return A list containing the pitchChoice.
     */
    java.util.List<ItemDefInstrument.PitchChoiceType> getPitchChoiceList();
    /**
     * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
     * @return The count of pitchChoice.
     */
    int getPitchChoiceCount();
    /**
     * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
     * @param index The index of the element to return.
     * @return The pitchChoice at the given index.
     */
    ItemDefInstrument.PitchChoiceType getPitchChoice(int index);

    /**
     * <code>repeated string pitch_choice_parm1 = 14;</code>
     * @return A list containing the pitchChoiceParm1.
     */
    java.util.List<java.lang.String>
        getPitchChoiceParm1List();
    /**
     * <code>repeated string pitch_choice_parm1 = 14;</code>
     * @return The count of pitchChoiceParm1.
     */
    int getPitchChoiceParm1Count();
    /**
     * <code>repeated string pitch_choice_parm1 = 14;</code>
     * @param index The index of the element to return.
     * @return The pitchChoiceParm1 at the given index.
     */
    java.lang.String getPitchChoiceParm1(int index);
    /**
     * <code>repeated string pitch_choice_parm1 = 14;</code>
     * @param index The index of the value to return.
     * @return The bytes of the pitchChoiceParm1 at the given index.
     */
    com.google.protobuf.ByteString
        getPitchChoiceParm1Bytes(int index);

    /**
     * <code>repeated string pitch_choice_parm2 = 15;</code>
     * @return A list containing the pitchChoiceParm2.
     */
    java.util.List<java.lang.String>
        getPitchChoiceParm2List();
    /**
     * <code>repeated string pitch_choice_parm2 = 15;</code>
     * @return The count of pitchChoiceParm2.
     */
    int getPitchChoiceParm2Count();
    /**
     * <code>repeated string pitch_choice_parm2 = 15;</code>
     * @param index The index of the element to return.
     * @return The pitchChoiceParm2 at the given index.
     */
    java.lang.String getPitchChoiceParm2(int index);
    /**
     * <code>repeated string pitch_choice_parm2 = 15;</code>
     * @param index The index of the value to return.
     * @return The bytes of the pitchChoiceParm2 at the given index.
     */
    com.google.protobuf.ByteString
        getPitchChoiceParm2Bytes(int index);

    /**
     * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
     * @return A list containing the tuning.
     */
    java.util.List<ItemDefInstrument.TuningType> getTuningList();
    /**
     * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
     * @return The count of tuning.
     */
    int getTuningCount();
    /**
     * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
     * @param index The index of the element to return.
     * @return The tuning at the given index.
     */
    ItemDefInstrument.TuningType getTuning(int index);

    /**
     * <code>repeated string tuning_parm = 17;</code>
     * @return A list containing the tuningParm.
     */
    java.util.List<java.lang.String>
        getTuningParmList();
    /**
     * <code>repeated string tuning_parm = 17;</code>
     * @return The count of tuningParm.
     */
    int getTuningParmCount();
    /**
     * <code>repeated string tuning_parm = 17;</code>
     * @param index The index of the element to return.
     * @return The tuningParm at the given index.
     */
    java.lang.String getTuningParm(int index);
    /**
     * <code>repeated string tuning_parm = 17;</code>
     * @param index The index of the value to return.
     * @return The bytes of the tuningParm at the given index.
     */
    com.google.protobuf.ByteString
        getTuningParmBytes(int index);

    /**
     * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
     */
    java.util.List<ItemDefInstrument.InstrumentRegister>
        getRegistersList();
    /**
     * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
     */
    ItemDefInstrument.InstrumentRegister getRegisters(int index);
    /**
     * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
     */
    int getRegistersCount();
    /**
     * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
     */
    java.util.List<? extends ItemDefInstrument.InstrumentRegisterOrBuilder>
        getRegistersOrBuilderList();
    /**
     * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
     */
    ItemDefInstrument.InstrumentRegisterOrBuilder getRegistersOrBuilder(
        int index);

    /**
     * <code>optional string description = 19;</code>
     * @return Whether the description field is set.
     */
    boolean hasDescription();
    /**
     * <code>optional string description = 19;</code>
     * @return The description.
     */
    java.lang.String getDescription();
    /**
     * <code>optional string description = 19;</code>
     * @return The bytes for description.
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();
  }
  /**
   * Protobuf type {@code ItemDefInstrument.InstrumentDef}
   */
  public static final class InstrumentDef extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ItemDefInstrument.InstrumentDef)
      InstrumentDefOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstrumentDef.newBuilder() to construct.
    private InstrumentDef(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstrumentDef() {
      pieces_ = java.util.Collections.emptyList();
      soundProduction_ = java.util.Collections.emptyList();
      soundProductionParm1_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      soundProductionParm2_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      pitchChoice_ = java.util.Collections.emptyList();
      pitchChoiceParm1_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      pitchChoiceParm2_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      tuning_ = java.util.Collections.emptyList();
      tuningParm_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      registers_ = java.util.Collections.emptyList();
      description_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InstrumentDef();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentDef_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentDef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ItemDefInstrument.InstrumentDef.class, ItemDefInstrument.InstrumentDef.Builder.class);
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private ItemDefInstrument.InstrumentFlags flags_;
    /**
     * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
     * @return The flags.
     */
    @java.lang.Override
    public ItemDefInstrument.InstrumentFlags getFlags() {
      return flags_ == null ? ItemDefInstrument.InstrumentFlags.getDefaultInstance() : flags_;
    }
    /**
     * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
     */
    @java.lang.Override
    public ItemDefInstrument.InstrumentFlagsOrBuilder getFlagsOrBuilder() {
      return flags_ == null ? ItemDefInstrument.InstrumentFlags.getDefaultInstance() : flags_;
    }

    public static final int SIZE_FIELD_NUMBER = 2;
    private int size_ = 0;
    /**
     * <code>optional int32 size = 2;</code>
     * @return Whether the size field is set.
     */
    @java.lang.Override
    public boolean hasSize() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 size = 2;</code>
     * @return The size.
     */
    @java.lang.Override
    public int getSize() {
      return size_;
    }

    public static final int VALUE_FIELD_NUMBER = 3;
    private int value_ = 0;
    /**
     * <code>optional int32 value = 3;</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int32 value = 3;</code>
     * @return The value.
     */
    @java.lang.Override
    public int getValue() {
      return value_;
    }

    public static final int MATERIAL_SIZE_FIELD_NUMBER = 4;
    private int materialSize_ = 0;
    /**
     * <code>optional int32 material_size = 4;</code>
     * @return Whether the materialSize field is set.
     */
    @java.lang.Override
    public boolean hasMaterialSize() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional int32 material_size = 4;</code>
     * @return The materialSize.
     */
    @java.lang.Override
    public int getMaterialSize() {
      return materialSize_;
    }

    public static final int PIECES_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<ItemDefInstrument.InstrumentPiece> pieces_;
    /**
     * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
     */
    @java.lang.Override
    public java.util.List<ItemDefInstrument.InstrumentPiece> getPiecesList() {
      return pieces_;
    }
    /**
     * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends ItemDefInstrument.InstrumentPieceOrBuilder>
        getPiecesOrBuilderList() {
      return pieces_;
    }
    /**
     * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
     */
    @java.lang.Override
    public int getPiecesCount() {
      return pieces_.size();
    }
    /**
     * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
     */
    @java.lang.Override
    public ItemDefInstrument.InstrumentPiece getPieces(int index) {
      return pieces_.get(index);
    }
    /**
     * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
     */
    @java.lang.Override
    public ItemDefInstrument.InstrumentPieceOrBuilder getPiecesOrBuilder(
        int index) {
      return pieces_.get(index);
    }

    public static final int PITCH_RANGE_MIN_FIELD_NUMBER = 6;
    private int pitchRangeMin_ = 0;
    /**
     * <code>optional int32 pitch_range_min = 6;</code>
     * @return Whether the pitchRangeMin field is set.
     */
    @java.lang.Override
    public boolean hasPitchRangeMin() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional int32 pitch_range_min = 6;</code>
     * @return The pitchRangeMin.
     */
    @java.lang.Override
    public int getPitchRangeMin() {
      return pitchRangeMin_;
    }

    public static final int PITCH_RANGE_MAX_FIELD_NUMBER = 7;
    private int pitchRangeMax_ = 0;
    /**
     * <code>optional int32 pitch_range_max = 7;</code>
     * @return Whether the pitchRangeMax field is set.
     */
    @java.lang.Override
    public boolean hasPitchRangeMax() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional int32 pitch_range_max = 7;</code>
     * @return The pitchRangeMax.
     */
    @java.lang.Override
    public int getPitchRangeMax() {
      return pitchRangeMax_;
    }

    public static final int VOLUME_MB_MIN_FIELD_NUMBER = 8;
    private int volumeMbMin_ = 0;
    /**
     * <code>optional int32 volume_mb_min = 8;</code>
     * @return Whether the volumeMbMin field is set.
     */
    @java.lang.Override
    public boolean hasVolumeMbMin() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional int32 volume_mb_min = 8;</code>
     * @return The volumeMbMin.
     */
    @java.lang.Override
    public int getVolumeMbMin() {
      return volumeMbMin_;
    }

    public static final int VOLUME_MB_MAX_FIELD_NUMBER = 9;
    private int volumeMbMax_ = 0;
    /**
     * <code>optional int32 volume_mb_max = 9;</code>
     * @return Whether the volumeMbMax field is set.
     */
    @java.lang.Override
    public boolean hasVolumeMbMax() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional int32 volume_mb_max = 9;</code>
     * @return The volumeMbMax.
     */
    @java.lang.Override
    public int getVolumeMbMax() {
      return volumeMbMax_;
    }

    public static final int SOUND_PRODUCTION_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private java.util.List<java.lang.Integer> soundProduction_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, ItemDefInstrument.SoundProductionType> soundProduction_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, ItemDefInstrument.SoundProductionType>() {
              public ItemDefInstrument.SoundProductionType convert(java.lang.Integer from) {
                ItemDefInstrument.SoundProductionType result = ItemDefInstrument.SoundProductionType.forNumber(from);
                return result == null ? ItemDefInstrument.SoundProductionType.PLUCKED_BY_BP : result;
              }
            };
    /**
     * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
     * @return A list containing the soundProduction.
     */
    @java.lang.Override
    public java.util.List<ItemDefInstrument.SoundProductionType> getSoundProductionList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, ItemDefInstrument.SoundProductionType>(soundProduction_, soundProduction_converter_);
    }
    /**
     * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
     * @return The count of soundProduction.
     */
    @java.lang.Override
    public int getSoundProductionCount() {
      return soundProduction_.size();
    }
    /**
     * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
     * @param index The index of the element to return.
     * @return The soundProduction at the given index.
     */
    @java.lang.Override
    public ItemDefInstrument.SoundProductionType getSoundProduction(int index) {
      return soundProduction_converter_.convert(soundProduction_.get(index));
    }

    public static final int SOUND_PRODUCTION_PARM1_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList soundProductionParm1_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string sound_production_parm1 = 11;</code>
     * @return A list containing the soundProductionParm1.
     */
    public com.google.protobuf.ProtocolStringList
        getSoundProductionParm1List() {
      return soundProductionParm1_;
    }
    /**
     * <code>repeated string sound_production_parm1 = 11;</code>
     * @return The count of soundProductionParm1.
     */
    public int getSoundProductionParm1Count() {
      return soundProductionParm1_.size();
    }
    /**
     * <code>repeated string sound_production_parm1 = 11;</code>
     * @param index The index of the element to return.
     * @return The soundProductionParm1 at the given index.
     */
    public java.lang.String getSoundProductionParm1(int index) {
      return soundProductionParm1_.get(index);
    }
    /**
     * <code>repeated string sound_production_parm1 = 11;</code>
     * @param index The index of the value to return.
     * @return The bytes of the soundProductionParm1 at the given index.
     */
    public com.google.protobuf.ByteString
        getSoundProductionParm1Bytes(int index) {
      return soundProductionParm1_.getByteString(index);
    }

    public static final int SOUND_PRODUCTION_PARM2_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList soundProductionParm2_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string sound_production_parm2 = 12;</code>
     * @return A list containing the soundProductionParm2.
     */
    public com.google.protobuf.ProtocolStringList
        getSoundProductionParm2List() {
      return soundProductionParm2_;
    }
    /**
     * <code>repeated string sound_production_parm2 = 12;</code>
     * @return The count of soundProductionParm2.
     */
    public int getSoundProductionParm2Count() {
      return soundProductionParm2_.size();
    }
    /**
     * <code>repeated string sound_production_parm2 = 12;</code>
     * @param index The index of the element to return.
     * @return The soundProductionParm2 at the given index.
     */
    public java.lang.String getSoundProductionParm2(int index) {
      return soundProductionParm2_.get(index);
    }
    /**
     * <code>repeated string sound_production_parm2 = 12;</code>
     * @param index The index of the value to return.
     * @return The bytes of the soundProductionParm2 at the given index.
     */
    public com.google.protobuf.ByteString
        getSoundProductionParm2Bytes(int index) {
      return soundProductionParm2_.getByteString(index);
    }

    public static final int PITCH_CHOICE_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private java.util.List<java.lang.Integer> pitchChoice_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, ItemDefInstrument.PitchChoiceType> pitchChoice_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, ItemDefInstrument.PitchChoiceType>() {
              public ItemDefInstrument.PitchChoiceType convert(java.lang.Integer from) {
                ItemDefInstrument.PitchChoiceType result = ItemDefInstrument.PitchChoiceType.forNumber(from);
                return result == null ? ItemDefInstrument.PitchChoiceType.MEMBRANE_POSITION : result;
              }
            };
    /**
     * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
     * @return A list containing the pitchChoice.
     */
    @java.lang.Override
    public java.util.List<ItemDefInstrument.PitchChoiceType> getPitchChoiceList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, ItemDefInstrument.PitchChoiceType>(pitchChoice_, pitchChoice_converter_);
    }
    /**
     * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
     * @return The count of pitchChoice.
     */
    @java.lang.Override
    public int getPitchChoiceCount() {
      return pitchChoice_.size();
    }
    /**
     * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
     * @param index The index of the element to return.
     * @return The pitchChoice at the given index.
     */
    @java.lang.Override
    public ItemDefInstrument.PitchChoiceType getPitchChoice(int index) {
      return pitchChoice_converter_.convert(pitchChoice_.get(index));
    }

    public static final int PITCH_CHOICE_PARM1_FIELD_NUMBER = 14;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList pitchChoiceParm1_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string pitch_choice_parm1 = 14;</code>
     * @return A list containing the pitchChoiceParm1.
     */
    public com.google.protobuf.ProtocolStringList
        getPitchChoiceParm1List() {
      return pitchChoiceParm1_;
    }
    /**
     * <code>repeated string pitch_choice_parm1 = 14;</code>
     * @return The count of pitchChoiceParm1.
     */
    public int getPitchChoiceParm1Count() {
      return pitchChoiceParm1_.size();
    }
    /**
     * <code>repeated string pitch_choice_parm1 = 14;</code>
     * @param index The index of the element to return.
     * @return The pitchChoiceParm1 at the given index.
     */
    public java.lang.String getPitchChoiceParm1(int index) {
      return pitchChoiceParm1_.get(index);
    }
    /**
     * <code>repeated string pitch_choice_parm1 = 14;</code>
     * @param index The index of the value to return.
     * @return The bytes of the pitchChoiceParm1 at the given index.
     */
    public com.google.protobuf.ByteString
        getPitchChoiceParm1Bytes(int index) {
      return pitchChoiceParm1_.getByteString(index);
    }

    public static final int PITCH_CHOICE_PARM2_FIELD_NUMBER = 15;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList pitchChoiceParm2_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string pitch_choice_parm2 = 15;</code>
     * @return A list containing the pitchChoiceParm2.
     */
    public com.google.protobuf.ProtocolStringList
        getPitchChoiceParm2List() {
      return pitchChoiceParm2_;
    }
    /**
     * <code>repeated string pitch_choice_parm2 = 15;</code>
     * @return The count of pitchChoiceParm2.
     */
    public int getPitchChoiceParm2Count() {
      return pitchChoiceParm2_.size();
    }
    /**
     * <code>repeated string pitch_choice_parm2 = 15;</code>
     * @param index The index of the element to return.
     * @return The pitchChoiceParm2 at the given index.
     */
    public java.lang.String getPitchChoiceParm2(int index) {
      return pitchChoiceParm2_.get(index);
    }
    /**
     * <code>repeated string pitch_choice_parm2 = 15;</code>
     * @param index The index of the value to return.
     * @return The bytes of the pitchChoiceParm2 at the given index.
     */
    public com.google.protobuf.ByteString
        getPitchChoiceParm2Bytes(int index) {
      return pitchChoiceParm2_.getByteString(index);
    }

    public static final int TUNING_FIELD_NUMBER = 16;
    @SuppressWarnings("serial")
    private java.util.List<java.lang.Integer> tuning_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, ItemDefInstrument.TuningType> tuning_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, ItemDefInstrument.TuningType>() {
              public ItemDefInstrument.TuningType convert(java.lang.Integer from) {
                ItemDefInstrument.TuningType result = ItemDefInstrument.TuningType.forNumber(from);
                return result == null ? ItemDefInstrument.TuningType.PEGS : result;
              }
            };
    /**
     * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
     * @return A list containing the tuning.
     */
    @java.lang.Override
    public java.util.List<ItemDefInstrument.TuningType> getTuningList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, ItemDefInstrument.TuningType>(tuning_, tuning_converter_);
    }
    /**
     * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
     * @return The count of tuning.
     */
    @java.lang.Override
    public int getTuningCount() {
      return tuning_.size();
    }
    /**
     * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
     * @param index The index of the element to return.
     * @return The tuning at the given index.
     */
    @java.lang.Override
    public ItemDefInstrument.TuningType getTuning(int index) {
      return tuning_converter_.convert(tuning_.get(index));
    }

    public static final int TUNING_PARM_FIELD_NUMBER = 17;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList tuningParm_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string tuning_parm = 17;</code>
     * @return A list containing the tuningParm.
     */
    public com.google.protobuf.ProtocolStringList
        getTuningParmList() {
      return tuningParm_;
    }
    /**
     * <code>repeated string tuning_parm = 17;</code>
     * @return The count of tuningParm.
     */
    public int getTuningParmCount() {
      return tuningParm_.size();
    }
    /**
     * <code>repeated string tuning_parm = 17;</code>
     * @param index The index of the element to return.
     * @return The tuningParm at the given index.
     */
    public java.lang.String getTuningParm(int index) {
      return tuningParm_.get(index);
    }
    /**
     * <code>repeated string tuning_parm = 17;</code>
     * @param index The index of the value to return.
     * @return The bytes of the tuningParm at the given index.
     */
    public com.google.protobuf.ByteString
        getTuningParmBytes(int index) {
      return tuningParm_.getByteString(index);
    }

    public static final int REGISTERS_FIELD_NUMBER = 18;
    @SuppressWarnings("serial")
    private java.util.List<ItemDefInstrument.InstrumentRegister> registers_;
    /**
     * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
     */
    @java.lang.Override
    public java.util.List<ItemDefInstrument.InstrumentRegister> getRegistersList() {
      return registers_;
    }
    /**
     * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
     */
    @java.lang.Override
    public java.util.List<? extends ItemDefInstrument.InstrumentRegisterOrBuilder>
        getRegistersOrBuilderList() {
      return registers_;
    }
    /**
     * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
     */
    @java.lang.Override
    public int getRegistersCount() {
      return registers_.size();
    }
    /**
     * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
     */
    @java.lang.Override
    public ItemDefInstrument.InstrumentRegister getRegisters(int index) {
      return registers_.get(index);
    }
    /**
     * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
     */
    @java.lang.Override
    public ItemDefInstrument.InstrumentRegisterOrBuilder getRegistersOrBuilder(
        int index) {
      return registers_.get(index);
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 19;
    @SuppressWarnings("serial")
    private volatile java.lang.Object description_ = "";
    /**
     * <code>optional string description = 19;</code>
     * @return Whether the description field is set.
     */
    @java.lang.Override
    public boolean hasDescription() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional string description = 19;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          description_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string description = 19;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getFlags());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, size_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(3, value_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(4, materialSize_);
      }
      for (int i = 0; i < pieces_.size(); i++) {
        output.writeMessage(5, pieces_.get(i));
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeInt32(6, pitchRangeMin_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt32(7, pitchRangeMax_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeInt32(8, volumeMbMin_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeInt32(9, volumeMbMax_);
      }
      for (int i = 0; i < soundProduction_.size(); i++) {
        output.writeEnum(10, soundProduction_.get(i));
      }
      for (int i = 0; i < soundProductionParm1_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 11, soundProductionParm1_.getRaw(i));
      }
      for (int i = 0; i < soundProductionParm2_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 12, soundProductionParm2_.getRaw(i));
      }
      for (int i = 0; i < pitchChoice_.size(); i++) {
        output.writeEnum(13, pitchChoice_.get(i));
      }
      for (int i = 0; i < pitchChoiceParm1_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 14, pitchChoiceParm1_.getRaw(i));
      }
      for (int i = 0; i < pitchChoiceParm2_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 15, pitchChoiceParm2_.getRaw(i));
      }
      for (int i = 0; i < tuning_.size(); i++) {
        output.writeEnum(16, tuning_.get(i));
      }
      for (int i = 0; i < tuningParm_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 17, tuningParm_.getRaw(i));
      }
      for (int i = 0; i < registers_.size(); i++) {
        output.writeMessage(18, registers_.get(i));
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 19, description_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getFlags());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, size_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, value_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, materialSize_);
      }
      for (int i = 0; i < pieces_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, pieces_.get(i));
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, pitchRangeMin_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, pitchRangeMax_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, volumeMbMin_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, volumeMbMax_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < soundProduction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(soundProduction_.get(i));
        }
        size += dataSize;
        size += 1 * soundProduction_.size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < soundProductionParm1_.size(); i++) {
          dataSize += computeStringSizeNoTag(soundProductionParm1_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getSoundProductionParm1List().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < soundProductionParm2_.size(); i++) {
          dataSize += computeStringSizeNoTag(soundProductionParm2_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getSoundProductionParm2List().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < pitchChoice_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(pitchChoice_.get(i));
        }
        size += dataSize;
        size += 1 * pitchChoice_.size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < pitchChoiceParm1_.size(); i++) {
          dataSize += computeStringSizeNoTag(pitchChoiceParm1_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getPitchChoiceParm1List().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < pitchChoiceParm2_.size(); i++) {
          dataSize += computeStringSizeNoTag(pitchChoiceParm2_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getPitchChoiceParm2List().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tuning_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(tuning_.get(i));
        }
        size += dataSize;
        size += 2 * tuning_.size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tuningParm_.size(); i++) {
          dataSize += computeStringSizeNoTag(tuningParm_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getTuningParmList().size();
      }
      for (int i = 0; i < registers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, registers_.get(i));
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(19, description_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ItemDefInstrument.InstrumentDef)) {
        return super.equals(obj);
      }
      ItemDefInstrument.InstrumentDef other = (ItemDefInstrument.InstrumentDef) obj;

      if (hasFlags() != other.hasFlags()) return false;
      if (hasFlags()) {
        if (!getFlags()
            .equals(other.getFlags())) return false;
      }
      if (hasSize() != other.hasSize()) return false;
      if (hasSize()) {
        if (getSize()
            != other.getSize()) return false;
      }
      if (hasValue() != other.hasValue()) return false;
      if (hasValue()) {
        if (getValue()
            != other.getValue()) return false;
      }
      if (hasMaterialSize() != other.hasMaterialSize()) return false;
      if (hasMaterialSize()) {
        if (getMaterialSize()
            != other.getMaterialSize()) return false;
      }
      if (!getPiecesList()
          .equals(other.getPiecesList())) return false;
      if (hasPitchRangeMin() != other.hasPitchRangeMin()) return false;
      if (hasPitchRangeMin()) {
        if (getPitchRangeMin()
            != other.getPitchRangeMin()) return false;
      }
      if (hasPitchRangeMax() != other.hasPitchRangeMax()) return false;
      if (hasPitchRangeMax()) {
        if (getPitchRangeMax()
            != other.getPitchRangeMax()) return false;
      }
      if (hasVolumeMbMin() != other.hasVolumeMbMin()) return false;
      if (hasVolumeMbMin()) {
        if (getVolumeMbMin()
            != other.getVolumeMbMin()) return false;
      }
      if (hasVolumeMbMax() != other.hasVolumeMbMax()) return false;
      if (hasVolumeMbMax()) {
        if (getVolumeMbMax()
            != other.getVolumeMbMax()) return false;
      }
      if (!soundProduction_.equals(other.soundProduction_)) return false;
      if (!getSoundProductionParm1List()
          .equals(other.getSoundProductionParm1List())) return false;
      if (!getSoundProductionParm2List()
          .equals(other.getSoundProductionParm2List())) return false;
      if (!pitchChoice_.equals(other.pitchChoice_)) return false;
      if (!getPitchChoiceParm1List()
          .equals(other.getPitchChoiceParm1List())) return false;
      if (!getPitchChoiceParm2List()
          .equals(other.getPitchChoiceParm2List())) return false;
      if (!tuning_.equals(other.tuning_)) return false;
      if (!getTuningParmList()
          .equals(other.getTuningParmList())) return false;
      if (!getRegistersList()
          .equals(other.getRegistersList())) return false;
      if (hasDescription() != other.hasDescription()) return false;
      if (hasDescription()) {
        if (!getDescription()
            .equals(other.getDescription())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags().hashCode();
      }
      if (hasSize()) {
        hash = (37 * hash) + SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getSize();
      }
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue();
      }
      if (hasMaterialSize()) {
        hash = (37 * hash) + MATERIAL_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMaterialSize();
      }
      if (getPiecesCount() > 0) {
        hash = (37 * hash) + PIECES_FIELD_NUMBER;
        hash = (53 * hash) + getPiecesList().hashCode();
      }
      if (hasPitchRangeMin()) {
        hash = (37 * hash) + PITCH_RANGE_MIN_FIELD_NUMBER;
        hash = (53 * hash) + getPitchRangeMin();
      }
      if (hasPitchRangeMax()) {
        hash = (37 * hash) + PITCH_RANGE_MAX_FIELD_NUMBER;
        hash = (53 * hash) + getPitchRangeMax();
      }
      if (hasVolumeMbMin()) {
        hash = (37 * hash) + VOLUME_MB_MIN_FIELD_NUMBER;
        hash = (53 * hash) + getVolumeMbMin();
      }
      if (hasVolumeMbMax()) {
        hash = (37 * hash) + VOLUME_MB_MAX_FIELD_NUMBER;
        hash = (53 * hash) + getVolumeMbMax();
      }
      if (getSoundProductionCount() > 0) {
        hash = (37 * hash) + SOUND_PRODUCTION_FIELD_NUMBER;
        hash = (53 * hash) + soundProduction_.hashCode();
      }
      if (getSoundProductionParm1Count() > 0) {
        hash = (37 * hash) + SOUND_PRODUCTION_PARM1_FIELD_NUMBER;
        hash = (53 * hash) + getSoundProductionParm1List().hashCode();
      }
      if (getSoundProductionParm2Count() > 0) {
        hash = (37 * hash) + SOUND_PRODUCTION_PARM2_FIELD_NUMBER;
        hash = (53 * hash) + getSoundProductionParm2List().hashCode();
      }
      if (getPitchChoiceCount() > 0) {
        hash = (37 * hash) + PITCH_CHOICE_FIELD_NUMBER;
        hash = (53 * hash) + pitchChoice_.hashCode();
      }
      if (getPitchChoiceParm1Count() > 0) {
        hash = (37 * hash) + PITCH_CHOICE_PARM1_FIELD_NUMBER;
        hash = (53 * hash) + getPitchChoiceParm1List().hashCode();
      }
      if (getPitchChoiceParm2Count() > 0) {
        hash = (37 * hash) + PITCH_CHOICE_PARM2_FIELD_NUMBER;
        hash = (53 * hash) + getPitchChoiceParm2List().hashCode();
      }
      if (getTuningCount() > 0) {
        hash = (37 * hash) + TUNING_FIELD_NUMBER;
        hash = (53 * hash) + tuning_.hashCode();
      }
      if (getTuningParmCount() > 0) {
        hash = (37 * hash) + TUNING_PARM_FIELD_NUMBER;
        hash = (53 * hash) + getTuningParmList().hashCode();
      }
      if (getRegistersCount() > 0) {
        hash = (37 * hash) + REGISTERS_FIELD_NUMBER;
        hash = (53 * hash) + getRegistersList().hashCode();
      }
      if (hasDescription()) {
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ItemDefInstrument.InstrumentDef parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentDef parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentDef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentDef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentDef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ItemDefInstrument.InstrumentDef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentDef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ItemDefInstrument.InstrumentDef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static ItemDefInstrument.InstrumentDef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static ItemDefInstrument.InstrumentDef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ItemDefInstrument.InstrumentDef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ItemDefInstrument.InstrumentDef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ItemDefInstrument.InstrumentDef prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ItemDefInstrument.InstrumentDef}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ItemDefInstrument.InstrumentDef)
        ItemDefInstrument.InstrumentDefOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentDef_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentDef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ItemDefInstrument.InstrumentDef.class, ItemDefInstrument.InstrumentDef.Builder.class);
      }

      // Construct using ItemDefInstrument.InstrumentDef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFlagsFieldBuilder();
          getPiecesFieldBuilder();
          getRegistersFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        flags_ = null;
        if (flagsBuilder_ != null) {
          flagsBuilder_.dispose();
          flagsBuilder_ = null;
        }
        size_ = 0;
        value_ = 0;
        materialSize_ = 0;
        if (piecesBuilder_ == null) {
          pieces_ = java.util.Collections.emptyList();
        } else {
          pieces_ = null;
          piecesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        pitchRangeMin_ = 0;
        pitchRangeMax_ = 0;
        volumeMbMin_ = 0;
        volumeMbMax_ = 0;
        soundProduction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        soundProductionParm1_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        soundProductionParm2_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        pitchChoice_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        pitchChoiceParm1_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        pitchChoiceParm2_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        tuning_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        tuningParm_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        if (registersBuilder_ == null) {
          registers_ = java.util.Collections.emptyList();
        } else {
          registers_ = null;
          registersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        description_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ItemDefInstrument.internal_static_ItemdefInstrument_InstrumentDef_descriptor;
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentDef getDefaultInstanceForType() {
        return ItemDefInstrument.InstrumentDef.getDefaultInstance();
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentDef build() {
        ItemDefInstrument.InstrumentDef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public ItemDefInstrument.InstrumentDef buildPartial() {
        ItemDefInstrument.InstrumentDef result = new ItemDefInstrument.InstrumentDef(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(ItemDefInstrument.InstrumentDef result) {
        if (piecesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            pieces_ = java.util.Collections.unmodifiableList(pieces_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.pieces_ = pieces_;
        } else {
          result.pieces_ = piecesBuilder_.build();
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          soundProduction_ = java.util.Collections.unmodifiableList(soundProduction_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.soundProduction_ = soundProduction_;
        if (((bitField0_ & 0x00001000) != 0)) {
          pitchChoice_ = java.util.Collections.unmodifiableList(pitchChoice_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.pitchChoice_ = pitchChoice_;
        if (((bitField0_ & 0x00008000) != 0)) {
          tuning_ = java.util.Collections.unmodifiableList(tuning_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.tuning_ = tuning_;
        if (registersBuilder_ == null) {
          if (((bitField0_ & 0x00020000) != 0)) {
            registers_ = java.util.Collections.unmodifiableList(registers_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.registers_ = registers_;
        } else {
          result.registers_ = registersBuilder_.build();
        }
      }

      private void buildPartial0(ItemDefInstrument.InstrumentDef result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.flags_ = flagsBuilder_ == null
              ? flags_
              : flagsBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.size_ = size_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.value_ = value_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.materialSize_ = materialSize_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.pitchRangeMin_ = pitchRangeMin_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.pitchRangeMax_ = pitchRangeMax_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.volumeMbMin_ = volumeMbMin_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.volumeMbMax_ = volumeMbMax_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          soundProductionParm1_.makeImmutable();
          result.soundProductionParm1_ = soundProductionParm1_;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          soundProductionParm2_.makeImmutable();
          result.soundProductionParm2_ = soundProductionParm2_;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          pitchChoiceParm1_.makeImmutable();
          result.pitchChoiceParm1_ = pitchChoiceParm1_;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          pitchChoiceParm2_.makeImmutable();
          result.pitchChoiceParm2_ = pitchChoiceParm2_;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          tuningParm_.makeImmutable();
          result.tuningParm_ = tuningParm_;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.description_ = description_;
          to_bitField0_ |= 0x00000100;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ItemDefInstrument.InstrumentDef) {
          return mergeFrom((ItemDefInstrument.InstrumentDef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ItemDefInstrument.InstrumentDef other) {
        if (other == ItemDefInstrument.InstrumentDef.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          mergeFlags(other.getFlags());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasMaterialSize()) {
          setMaterialSize(other.getMaterialSize());
        }
        if (piecesBuilder_ == null) {
          if (!other.pieces_.isEmpty()) {
            if (pieces_.isEmpty()) {
              pieces_ = other.pieces_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensurePiecesIsMutable();
              pieces_.addAll(other.pieces_);
            }
            onChanged();
          }
        } else {
          if (!other.pieces_.isEmpty()) {
            if (piecesBuilder_.isEmpty()) {
              piecesBuilder_.dispose();
              piecesBuilder_ = null;
              pieces_ = other.pieces_;
              bitField0_ = (bitField0_ & ~0x00000010);
              piecesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPiecesFieldBuilder() : null;
            } else {
              piecesBuilder_.addAllMessages(other.pieces_);
            }
          }
        }
        if (other.hasPitchRangeMin()) {
          setPitchRangeMin(other.getPitchRangeMin());
        }
        if (other.hasPitchRangeMax()) {
          setPitchRangeMax(other.getPitchRangeMax());
        }
        if (other.hasVolumeMbMin()) {
          setVolumeMbMin(other.getVolumeMbMin());
        }
        if (other.hasVolumeMbMax()) {
          setVolumeMbMax(other.getVolumeMbMax());
        }
        if (!other.soundProduction_.isEmpty()) {
          if (soundProduction_.isEmpty()) {
            soundProduction_ = other.soundProduction_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureSoundProductionIsMutable();
            soundProduction_.addAll(other.soundProduction_);
          }
          onChanged();
        }
        if (!other.soundProductionParm1_.isEmpty()) {
          if (soundProductionParm1_.isEmpty()) {
            soundProductionParm1_ = other.soundProductionParm1_;
            bitField0_ |= 0x00000400;
          } else {
            ensureSoundProductionParm1IsMutable();
            soundProductionParm1_.addAll(other.soundProductionParm1_);
          }
          onChanged();
        }
        if (!other.soundProductionParm2_.isEmpty()) {
          if (soundProductionParm2_.isEmpty()) {
            soundProductionParm2_ = other.soundProductionParm2_;
            bitField0_ |= 0x00000800;
          } else {
            ensureSoundProductionParm2IsMutable();
            soundProductionParm2_.addAll(other.soundProductionParm2_);
          }
          onChanged();
        }
        if (!other.pitchChoice_.isEmpty()) {
          if (pitchChoice_.isEmpty()) {
            pitchChoice_ = other.pitchChoice_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensurePitchChoiceIsMutable();
            pitchChoice_.addAll(other.pitchChoice_);
          }
          onChanged();
        }
        if (!other.pitchChoiceParm1_.isEmpty()) {
          if (pitchChoiceParm1_.isEmpty()) {
            pitchChoiceParm1_ = other.pitchChoiceParm1_;
            bitField0_ |= 0x00002000;
          } else {
            ensurePitchChoiceParm1IsMutable();
            pitchChoiceParm1_.addAll(other.pitchChoiceParm1_);
          }
          onChanged();
        }
        if (!other.pitchChoiceParm2_.isEmpty()) {
          if (pitchChoiceParm2_.isEmpty()) {
            pitchChoiceParm2_ = other.pitchChoiceParm2_;
            bitField0_ |= 0x00004000;
          } else {
            ensurePitchChoiceParm2IsMutable();
            pitchChoiceParm2_.addAll(other.pitchChoiceParm2_);
          }
          onChanged();
        }
        if (!other.tuning_.isEmpty()) {
          if (tuning_.isEmpty()) {
            tuning_ = other.tuning_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureTuningIsMutable();
            tuning_.addAll(other.tuning_);
          }
          onChanged();
        }
        if (!other.tuningParm_.isEmpty()) {
          if (tuningParm_.isEmpty()) {
            tuningParm_ = other.tuningParm_;
            bitField0_ |= 0x00010000;
          } else {
            ensureTuningParmIsMutable();
            tuningParm_.addAll(other.tuningParm_);
          }
          onChanged();
        }
        if (registersBuilder_ == null) {
          if (!other.registers_.isEmpty()) {
            if (registers_.isEmpty()) {
              registers_ = other.registers_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensureRegistersIsMutable();
              registers_.addAll(other.registers_);
            }
            onChanged();
          }
        } else {
          if (!other.registers_.isEmpty()) {
            if (registersBuilder_.isEmpty()) {
              registersBuilder_.dispose();
              registersBuilder_ = null;
              registers_ = other.registers_;
              bitField0_ = (bitField0_ & ~0x00020000);
              registersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRegistersFieldBuilder() : null;
            } else {
              registersBuilder_.addAllMessages(other.registers_);
            }
          }
        }
        if (other.hasDescription()) {
          description_ = other.description_;
          bitField0_ |= 0x00040000;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getFlagsFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                size_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                value_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                materialSize_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                ItemDefInstrument.InstrumentPiece m =
                    input.readMessage(
                        ItemDefInstrument.InstrumentPiece.PARSER,
                        extensionRegistry);
                if (piecesBuilder_ == null) {
                  ensurePiecesIsMutable();
                  pieces_.add(m);
                } else {
                  piecesBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 48: {
                pitchRangeMin_ = input.readInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                pitchRangeMax_ = input.readInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                volumeMbMin_ = input.readInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                volumeMbMax_ = input.readInt32();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 80: {
                int tmpRaw = input.readEnum();
                ItemDefInstrument.SoundProductionType tmpValue =
                    ItemDefInstrument.SoundProductionType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(10, tmpRaw);
                } else {
                  ensureSoundProductionIsMutable();
                  soundProduction_.add(tmpRaw);
                }
                break;
              } // case 80
              case 82: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  ItemDefInstrument.SoundProductionType tmpValue =
                      ItemDefInstrument.SoundProductionType.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(10, tmpRaw);
                  } else {
                    ensureSoundProductionIsMutable();
                    soundProduction_.add(tmpRaw);
                  }
                }
                input.popLimit(oldLimit);
                break;
              } // case 82
              case 90: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureSoundProductionParm1IsMutable();
                soundProductionParm1_.add(bs);
                break;
              } // case 90
              case 98: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureSoundProductionParm2IsMutable();
                soundProductionParm2_.add(bs);
                break;
              } // case 98
              case 104: {
                int tmpRaw = input.readEnum();
                ItemDefInstrument.PitchChoiceType tmpValue =
                    ItemDefInstrument.PitchChoiceType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(13, tmpRaw);
                } else {
                  ensurePitchChoiceIsMutable();
                  pitchChoice_.add(tmpRaw);
                }
                break;
              } // case 104
              case 106: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  ItemDefInstrument.PitchChoiceType tmpValue =
                      ItemDefInstrument.PitchChoiceType.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(13, tmpRaw);
                  } else {
                    ensurePitchChoiceIsMutable();
                    pitchChoice_.add(tmpRaw);
                  }
                }
                input.popLimit(oldLimit);
                break;
              } // case 106
              case 114: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensurePitchChoiceParm1IsMutable();
                pitchChoiceParm1_.add(bs);
                break;
              } // case 114
              case 122: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensurePitchChoiceParm2IsMutable();
                pitchChoiceParm2_.add(bs);
                break;
              } // case 122
              case 128: {
                int tmpRaw = input.readEnum();
                ItemDefInstrument.TuningType tmpValue =
                    ItemDefInstrument.TuningType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(16, tmpRaw);
                } else {
                  ensureTuningIsMutable();
                  tuning_.add(tmpRaw);
                }
                break;
              } // case 128
              case 130: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  ItemDefInstrument.TuningType tmpValue =
                      ItemDefInstrument.TuningType.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(16, tmpRaw);
                  } else {
                    ensureTuningIsMutable();
                    tuning_.add(tmpRaw);
                  }
                }
                input.popLimit(oldLimit);
                break;
              } // case 130
              case 138: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureTuningParmIsMutable();
                tuningParm_.add(bs);
                break;
              } // case 138
              case 146: {
                ItemDefInstrument.InstrumentRegister m =
                    input.readMessage(
                        ItemDefInstrument.InstrumentRegister.PARSER,
                        extensionRegistry);
                if (registersBuilder_ == null) {
                  ensureRegistersIsMutable();
                  registers_.add(m);
                } else {
                  registersBuilder_.addMessage(m);
                }
                break;
              } // case 146
              case 154: {
                description_ = input.readBytes();
                bitField0_ |= 0x00040000;
                break;
              } // case 154
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private ItemDefInstrument.InstrumentFlags flags_;
      private com.google.protobuf.SingleFieldBuilderV3<
          ItemDefInstrument.InstrumentFlags, ItemDefInstrument.InstrumentFlags.Builder, ItemDefInstrument.InstrumentFlagsOrBuilder> flagsBuilder_;
      /**
       * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
       * @return Whether the flags field is set.
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
       * @return The flags.
       */
      public ItemDefInstrument.InstrumentFlags getFlags() {
        if (flagsBuilder_ == null) {
          return flags_ == null ? ItemDefInstrument.InstrumentFlags.getDefaultInstance() : flags_;
        } else {
          return flagsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
       */
      public Builder setFlags(ItemDefInstrument.InstrumentFlags value) {
        if (flagsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          flags_ = value;
        } else {
          flagsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
       */
      public Builder setFlags(
          ItemDefInstrument.InstrumentFlags.Builder builderForValue) {
        if (flagsBuilder_ == null) {
          flags_ = builderForValue.build();
        } else {
          flagsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
       */
      public Builder mergeFlags(ItemDefInstrument.InstrumentFlags value) {
        if (flagsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            flags_ != null &&
            flags_ != ItemDefInstrument.InstrumentFlags.getDefaultInstance()) {
            getFlagsBuilder().mergeFrom(value);
          } else {
            flags_ = value;
          }
        } else {
          flagsBuilder_.mergeFrom(value);
        }
        if (flags_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = null;
        if (flagsBuilder_ != null) {
          flagsBuilder_.dispose();
          flagsBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
       */
      public ItemDefInstrument.InstrumentFlags.Builder getFlagsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFlagsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
       */
      public ItemDefInstrument.InstrumentFlagsOrBuilder getFlagsOrBuilder() {
        if (flagsBuilder_ != null) {
          return flagsBuilder_.getMessageOrBuilder();
        } else {
          return flags_ == null ?
              ItemDefInstrument.InstrumentFlags.getDefaultInstance() : flags_;
        }
      }
      /**
       * <code>optional .ItemDefInstrument.InstrumentFlags flags = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          ItemDefInstrument.InstrumentFlags, ItemDefInstrument.InstrumentFlags.Builder, ItemDefInstrument.InstrumentFlagsOrBuilder>
          getFlagsFieldBuilder() {
        if (flagsBuilder_ == null) {
          flagsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              ItemDefInstrument.InstrumentFlags, ItemDefInstrument.InstrumentFlags.Builder, ItemDefInstrument.InstrumentFlagsOrBuilder>(
                  getFlags(),
                  getParentForChildren(),
                  isClean());
          flags_ = null;
        }
        return flagsBuilder_;
      }

      private int size_ ;
      /**
       * <code>optional int32 size = 2;</code>
       * @return Whether the size field is set.
       */
      @java.lang.Override
      public boolean hasSize() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int32 size = 2;</code>
       * @return The size.
       */
      @java.lang.Override
      public int getSize() {
        return size_;
      }
      /**
       * <code>optional int32 size = 2;</code>
       * @param value The size to set.
       * @return This builder for chaining.
       */
      public Builder setSize(int value) {

        size_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 size = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        size_ = 0;
        onChanged();
        return this;
      }

      private int value_ ;
      /**
       * <code>optional int32 value = 3;</code>
       * @return Whether the value field is set.
       */
      @java.lang.Override
      public boolean hasValue() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional int32 value = 3;</code>
       * @return The value.
       */
      @java.lang.Override
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional int32 value = 3;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(int value) {

        value_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        value_ = 0;
        onChanged();
        return this;
      }

      private int materialSize_ ;
      /**
       * <code>optional int32 material_size = 4;</code>
       * @return Whether the materialSize field is set.
       */
      @java.lang.Override
      public boolean hasMaterialSize() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional int32 material_size = 4;</code>
       * @return The materialSize.
       */
      @java.lang.Override
      public int getMaterialSize() {
        return materialSize_;
      }
      /**
       * <code>optional int32 material_size = 4;</code>
       * @param value The materialSize to set.
       * @return This builder for chaining.
       */
      public Builder setMaterialSize(int value) {

        materialSize_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 material_size = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaterialSize() {
        bitField0_ = (bitField0_ & ~0x00000008);
        materialSize_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<ItemDefInstrument.InstrumentPiece> pieces_ =
        java.util.Collections.emptyList();
      private void ensurePiecesIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          pieces_ = new java.util.ArrayList<ItemDefInstrument.InstrumentPiece>(pieces_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ItemDefInstrument.InstrumentPiece, ItemDefInstrument.InstrumentPiece.Builder, ItemDefInstrument.InstrumentPieceOrBuilder> piecesBuilder_;

      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public java.util.List<ItemDefInstrument.InstrumentPiece> getPiecesList() {
        if (piecesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(pieces_);
        } else {
          return piecesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public int getPiecesCount() {
        if (piecesBuilder_ == null) {
          return pieces_.size();
        } else {
          return piecesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public ItemDefInstrument.InstrumentPiece getPieces(int index) {
        if (piecesBuilder_ == null) {
          return pieces_.get(index);
        } else {
          return piecesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public Builder setPieces(
          int index, ItemDefInstrument.InstrumentPiece value) {
        if (piecesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePiecesIsMutable();
          pieces_.set(index, value);
          onChanged();
        } else {
          piecesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public Builder setPieces(
          int index, ItemDefInstrument.InstrumentPiece.Builder builderForValue) {
        if (piecesBuilder_ == null) {
          ensurePiecesIsMutable();
          pieces_.set(index, builderForValue.build());
          onChanged();
        } else {
          piecesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public Builder addPieces(ItemDefInstrument.InstrumentPiece value) {
        if (piecesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePiecesIsMutable();
          pieces_.add(value);
          onChanged();
        } else {
          piecesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public Builder addPieces(
          int index, ItemDefInstrument.InstrumentPiece value) {
        if (piecesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePiecesIsMutable();
          pieces_.add(index, value);
          onChanged();
        } else {
          piecesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public Builder addPieces(
          ItemDefInstrument.InstrumentPiece.Builder builderForValue) {
        if (piecesBuilder_ == null) {
          ensurePiecesIsMutable();
          pieces_.add(builderForValue.build());
          onChanged();
        } else {
          piecesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public Builder addPieces(
          int index, ItemDefInstrument.InstrumentPiece.Builder builderForValue) {
        if (piecesBuilder_ == null) {
          ensurePiecesIsMutable();
          pieces_.add(index, builderForValue.build());
          onChanged();
        } else {
          piecesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public Builder addAllPieces(
          java.lang.Iterable<? extends ItemDefInstrument.InstrumentPiece> values) {
        if (piecesBuilder_ == null) {
          ensurePiecesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, pieces_);
          onChanged();
        } else {
          piecesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public Builder clearPieces() {
        if (piecesBuilder_ == null) {
          pieces_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          piecesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public Builder removePieces(int index) {
        if (piecesBuilder_ == null) {
          ensurePiecesIsMutable();
          pieces_.remove(index);
          onChanged();
        } else {
          piecesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public ItemDefInstrument.InstrumentPiece.Builder getPiecesBuilder(
          int index) {
        return getPiecesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public ItemDefInstrument.InstrumentPieceOrBuilder getPiecesOrBuilder(
          int index) {
        if (piecesBuilder_ == null) {
          return pieces_.get(index);  } else {
          return piecesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public java.util.List<? extends ItemDefInstrument.InstrumentPieceOrBuilder>
           getPiecesOrBuilderList() {
        if (piecesBuilder_ != null) {
          return piecesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(pieces_);
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public ItemDefInstrument.InstrumentPiece.Builder addPiecesBuilder() {
        return getPiecesFieldBuilder().addBuilder(
            ItemDefInstrument.InstrumentPiece.getDefaultInstance());
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public ItemDefInstrument.InstrumentPiece.Builder addPiecesBuilder(
          int index) {
        return getPiecesFieldBuilder().addBuilder(
            index, ItemDefInstrument.InstrumentPiece.getDefaultInstance());
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentPiece pieces = 5;</code>
       */
      public java.util.List<ItemDefInstrument.InstrumentPiece.Builder>
           getPiecesBuilderList() {
        return getPiecesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ItemDefInstrument.InstrumentPiece, ItemDefInstrument.InstrumentPiece.Builder, ItemDefInstrument.InstrumentPieceOrBuilder>
          getPiecesFieldBuilder() {
        if (piecesBuilder_ == null) {
          piecesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ItemDefInstrument.InstrumentPiece, ItemDefInstrument.InstrumentPiece.Builder, ItemDefInstrument.InstrumentPieceOrBuilder>(
                  pieces_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          pieces_ = null;
        }
        return piecesBuilder_;
      }

      private int pitchRangeMin_ ;
      /**
       * <code>optional int32 pitch_range_min = 6;</code>
       * @return Whether the pitchRangeMin field is set.
       */
      @java.lang.Override
      public boolean hasPitchRangeMin() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional int32 pitch_range_min = 6;</code>
       * @return The pitchRangeMin.
       */
      @java.lang.Override
      public int getPitchRangeMin() {
        return pitchRangeMin_;
      }
      /**
       * <code>optional int32 pitch_range_min = 6;</code>
       * @param value The pitchRangeMin to set.
       * @return This builder for chaining.
       */
      public Builder setPitchRangeMin(int value) {

        pitchRangeMin_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pitch_range_min = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitchRangeMin() {
        bitField0_ = (bitField0_ & ~0x00000020);
        pitchRangeMin_ = 0;
        onChanged();
        return this;
      }

      private int pitchRangeMax_ ;
      /**
       * <code>optional int32 pitch_range_max = 7;</code>
       * @return Whether the pitchRangeMax field is set.
       */
      @java.lang.Override
      public boolean hasPitchRangeMax() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional int32 pitch_range_max = 7;</code>
       * @return The pitchRangeMax.
       */
      @java.lang.Override
      public int getPitchRangeMax() {
        return pitchRangeMax_;
      }
      /**
       * <code>optional int32 pitch_range_max = 7;</code>
       * @param value The pitchRangeMax to set.
       * @return This builder for chaining.
       */
      public Builder setPitchRangeMax(int value) {

        pitchRangeMax_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pitch_range_max = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitchRangeMax() {
        bitField0_ = (bitField0_ & ~0x00000040);
        pitchRangeMax_ = 0;
        onChanged();
        return this;
      }

      private int volumeMbMin_ ;
      /**
       * <code>optional int32 volume_mb_min = 8;</code>
       * @return Whether the volumeMbMin field is set.
       */
      @java.lang.Override
      public boolean hasVolumeMbMin() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional int32 volume_mb_min = 8;</code>
       * @return The volumeMbMin.
       */
      @java.lang.Override
      public int getVolumeMbMin() {
        return volumeMbMin_;
      }
      /**
       * <code>optional int32 volume_mb_min = 8;</code>
       * @param value The volumeMbMin to set.
       * @return This builder for chaining.
       */
      public Builder setVolumeMbMin(int value) {

        volumeMbMin_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 volume_mb_min = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearVolumeMbMin() {
        bitField0_ = (bitField0_ & ~0x00000080);
        volumeMbMin_ = 0;
        onChanged();
        return this;
      }

      private int volumeMbMax_ ;
      /**
       * <code>optional int32 volume_mb_max = 9;</code>
       * @return Whether the volumeMbMax field is set.
       */
      @java.lang.Override
      public boolean hasVolumeMbMax() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional int32 volume_mb_max = 9;</code>
       * @return The volumeMbMax.
       */
      @java.lang.Override
      public int getVolumeMbMax() {
        return volumeMbMax_;
      }
      /**
       * <code>optional int32 volume_mb_max = 9;</code>
       * @param value The volumeMbMax to set.
       * @return This builder for chaining.
       */
      public Builder setVolumeMbMax(int value) {

        volumeMbMax_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 volume_mb_max = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearVolumeMbMax() {
        bitField0_ = (bitField0_ & ~0x00000100);
        volumeMbMax_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> soundProduction_ =
        java.util.Collections.emptyList();
      private void ensureSoundProductionIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          soundProduction_ = new java.util.ArrayList<java.lang.Integer>(soundProduction_);
          bitField0_ |= 0x00000200;
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
       * @return A list containing the soundProduction.
       */
      public java.util.List<ItemDefInstrument.SoundProductionType> getSoundProductionList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, ItemDefInstrument.SoundProductionType>(soundProduction_, soundProduction_converter_);
      }
      /**
       * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
       * @return The count of soundProduction.
       */
      public int getSoundProductionCount() {
        return soundProduction_.size();
      }
      /**
       * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
       * @param index The index of the element to return.
       * @return The soundProduction at the given index.
       */
      public ItemDefInstrument.SoundProductionType getSoundProduction(int index) {
        return soundProduction_converter_.convert(soundProduction_.get(index));
      }
      /**
       * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
       * @param index The index to set the value at.
       * @param value The soundProduction to set.
       * @return This builder for chaining.
       */
      public Builder setSoundProduction(
          int index, ItemDefInstrument.SoundProductionType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSoundProductionIsMutable();
        soundProduction_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
       * @param value The soundProduction to add.
       * @return This builder for chaining.
       */
      public Builder addSoundProduction(ItemDefInstrument.SoundProductionType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSoundProductionIsMutable();
        soundProduction_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
       * @param values The soundProduction to add.
       * @return This builder for chaining.
       */
      public Builder addAllSoundProduction(
          java.lang.Iterable<? extends ItemDefInstrument.SoundProductionType> values) {
        ensureSoundProductionIsMutable();
        for (ItemDefInstrument.SoundProductionType value : values) {
          soundProduction_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.SoundProductionType sound_production = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearSoundProduction() {
        soundProduction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList soundProductionParm1_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureSoundProductionParm1IsMutable() {
        if (!soundProductionParm1_.isModifiable()) {
          soundProductionParm1_ = new com.google.protobuf.LazyStringArrayList(soundProductionParm1_);
        }
        bitField0_ |= 0x00000400;
      }
      /**
       * <code>repeated string sound_production_parm1 = 11;</code>
       * @return A list containing the soundProductionParm1.
       */
      public com.google.protobuf.ProtocolStringList
          getSoundProductionParm1List() {
        soundProductionParm1_.makeImmutable();
        return soundProductionParm1_;
      }
      /**
       * <code>repeated string sound_production_parm1 = 11;</code>
       * @return The count of soundProductionParm1.
       */
      public int getSoundProductionParm1Count() {
        return soundProductionParm1_.size();
      }
      /**
       * <code>repeated string sound_production_parm1 = 11;</code>
       * @param index The index of the element to return.
       * @return The soundProductionParm1 at the given index.
       */
      public java.lang.String getSoundProductionParm1(int index) {
        return soundProductionParm1_.get(index);
      }
      /**
       * <code>repeated string sound_production_parm1 = 11;</code>
       * @param index The index of the value to return.
       * @return The bytes of the soundProductionParm1 at the given index.
       */
      public com.google.protobuf.ByteString
          getSoundProductionParm1Bytes(int index) {
        return soundProductionParm1_.getByteString(index);
      }
      /**
       * <code>repeated string sound_production_parm1 = 11;</code>
       * @param index The index to set the value at.
       * @param value The soundProductionParm1 to set.
       * @return This builder for chaining.
       */
      public Builder setSoundProductionParm1(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSoundProductionParm1IsMutable();
        soundProductionParm1_.set(index, value);
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sound_production_parm1 = 11;</code>
       * @param value The soundProductionParm1 to add.
       * @return This builder for chaining.
       */
      public Builder addSoundProductionParm1(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSoundProductionParm1IsMutable();
        soundProductionParm1_.add(value);
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sound_production_parm1 = 11;</code>
       * @param values The soundProductionParm1 to add.
       * @return This builder for chaining.
       */
      public Builder addAllSoundProductionParm1(
          java.lang.Iterable<java.lang.String> values) {
        ensureSoundProductionParm1IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, soundProductionParm1_);
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sound_production_parm1 = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearSoundProductionParm1() {
        soundProductionParm1_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sound_production_parm1 = 11;</code>
       * @param value The bytes of the soundProductionParm1 to add.
       * @return This builder for chaining.
       */
      public Builder addSoundProductionParm1Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSoundProductionParm1IsMutable();
        soundProductionParm1_.add(value);
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList soundProductionParm2_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureSoundProductionParm2IsMutable() {
        if (!soundProductionParm2_.isModifiable()) {
          soundProductionParm2_ = new com.google.protobuf.LazyStringArrayList(soundProductionParm2_);
        }
        bitField0_ |= 0x00000800;
      }
      /**
       * <code>repeated string sound_production_parm2 = 12;</code>
       * @return A list containing the soundProductionParm2.
       */
      public com.google.protobuf.ProtocolStringList
          getSoundProductionParm2List() {
        soundProductionParm2_.makeImmutable();
        return soundProductionParm2_;
      }
      /**
       * <code>repeated string sound_production_parm2 = 12;</code>
       * @return The count of soundProductionParm2.
       */
      public int getSoundProductionParm2Count() {
        return soundProductionParm2_.size();
      }
      /**
       * <code>repeated string sound_production_parm2 = 12;</code>
       * @param index The index of the element to return.
       * @return The soundProductionParm2 at the given index.
       */
      public java.lang.String getSoundProductionParm2(int index) {
        return soundProductionParm2_.get(index);
      }
      /**
       * <code>repeated string sound_production_parm2 = 12;</code>
       * @param index The index of the value to return.
       * @return The bytes of the soundProductionParm2 at the given index.
       */
      public com.google.protobuf.ByteString
          getSoundProductionParm2Bytes(int index) {
        return soundProductionParm2_.getByteString(index);
      }
      /**
       * <code>repeated string sound_production_parm2 = 12;</code>
       * @param index The index to set the value at.
       * @param value The soundProductionParm2 to set.
       * @return This builder for chaining.
       */
      public Builder setSoundProductionParm2(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSoundProductionParm2IsMutable();
        soundProductionParm2_.set(index, value);
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sound_production_parm2 = 12;</code>
       * @param value The soundProductionParm2 to add.
       * @return This builder for chaining.
       */
      public Builder addSoundProductionParm2(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSoundProductionParm2IsMutable();
        soundProductionParm2_.add(value);
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sound_production_parm2 = 12;</code>
       * @param values The soundProductionParm2 to add.
       * @return This builder for chaining.
       */
      public Builder addAllSoundProductionParm2(
          java.lang.Iterable<java.lang.String> values) {
        ensureSoundProductionParm2IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, soundProductionParm2_);
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sound_production_parm2 = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearSoundProductionParm2() {
        soundProductionParm2_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string sound_production_parm2 = 12;</code>
       * @param value The bytes of the soundProductionParm2 to add.
       * @return This builder for chaining.
       */
      public Builder addSoundProductionParm2Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSoundProductionParm2IsMutable();
        soundProductionParm2_.add(value);
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> pitchChoice_ =
        java.util.Collections.emptyList();
      private void ensurePitchChoiceIsMutable() {
        if (!((bitField0_ & 0x00001000) != 0)) {
          pitchChoice_ = new java.util.ArrayList<java.lang.Integer>(pitchChoice_);
          bitField0_ |= 0x00001000;
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
       * @return A list containing the pitchChoice.
       */
      public java.util.List<ItemDefInstrument.PitchChoiceType> getPitchChoiceList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, ItemDefInstrument.PitchChoiceType>(pitchChoice_, pitchChoice_converter_);
      }
      /**
       * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
       * @return The count of pitchChoice.
       */
      public int getPitchChoiceCount() {
        return pitchChoice_.size();
      }
      /**
       * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
       * @param index The index of the element to return.
       * @return The pitchChoice at the given index.
       */
      public ItemDefInstrument.PitchChoiceType getPitchChoice(int index) {
        return pitchChoice_converter_.convert(pitchChoice_.get(index));
      }
      /**
       * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
       * @param index The index to set the value at.
       * @param value The pitchChoice to set.
       * @return This builder for chaining.
       */
      public Builder setPitchChoice(
          int index, ItemDefInstrument.PitchChoiceType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePitchChoiceIsMutable();
        pitchChoice_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
       * @param value The pitchChoice to add.
       * @return This builder for chaining.
       */
      public Builder addPitchChoice(ItemDefInstrument.PitchChoiceType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePitchChoiceIsMutable();
        pitchChoice_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
       * @param values The pitchChoice to add.
       * @return This builder for chaining.
       */
      public Builder addAllPitchChoice(
          java.lang.Iterable<? extends ItemDefInstrument.PitchChoiceType> values) {
        ensurePitchChoiceIsMutable();
        for (ItemDefInstrument.PitchChoiceType value : values) {
          pitchChoice_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.PitchChoiceType pitch_choice = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitchChoice() {
        pitchChoice_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList pitchChoiceParm1_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensurePitchChoiceParm1IsMutable() {
        if (!pitchChoiceParm1_.isModifiable()) {
          pitchChoiceParm1_ = new com.google.protobuf.LazyStringArrayList(pitchChoiceParm1_);
        }
        bitField0_ |= 0x00002000;
      }
      /**
       * <code>repeated string pitch_choice_parm1 = 14;</code>
       * @return A list containing the pitchChoiceParm1.
       */
      public com.google.protobuf.ProtocolStringList
          getPitchChoiceParm1List() {
        pitchChoiceParm1_.makeImmutable();
        return pitchChoiceParm1_;
      }
      /**
       * <code>repeated string pitch_choice_parm1 = 14;</code>
       * @return The count of pitchChoiceParm1.
       */
      public int getPitchChoiceParm1Count() {
        return pitchChoiceParm1_.size();
      }
      /**
       * <code>repeated string pitch_choice_parm1 = 14;</code>
       * @param index The index of the element to return.
       * @return The pitchChoiceParm1 at the given index.
       */
      public java.lang.String getPitchChoiceParm1(int index) {
        return pitchChoiceParm1_.get(index);
      }
      /**
       * <code>repeated string pitch_choice_parm1 = 14;</code>
       * @param index The index of the value to return.
       * @return The bytes of the pitchChoiceParm1 at the given index.
       */
      public com.google.protobuf.ByteString
          getPitchChoiceParm1Bytes(int index) {
        return pitchChoiceParm1_.getByteString(index);
      }
      /**
       * <code>repeated string pitch_choice_parm1 = 14;</code>
       * @param index The index to set the value at.
       * @param value The pitchChoiceParm1 to set.
       * @return This builder for chaining.
       */
      public Builder setPitchChoiceParm1(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensurePitchChoiceParm1IsMutable();
        pitchChoiceParm1_.set(index, value);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string pitch_choice_parm1 = 14;</code>
       * @param value The pitchChoiceParm1 to add.
       * @return This builder for chaining.
       */
      public Builder addPitchChoiceParm1(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensurePitchChoiceParm1IsMutable();
        pitchChoiceParm1_.add(value);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string pitch_choice_parm1 = 14;</code>
       * @param values The pitchChoiceParm1 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPitchChoiceParm1(
          java.lang.Iterable<java.lang.String> values) {
        ensurePitchChoiceParm1IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pitchChoiceParm1_);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string pitch_choice_parm1 = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitchChoiceParm1() {
        pitchChoiceParm1_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string pitch_choice_parm1 = 14;</code>
       * @param value The bytes of the pitchChoiceParm1 to add.
       * @return This builder for chaining.
       */
      public Builder addPitchChoiceParm1Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensurePitchChoiceParm1IsMutable();
        pitchChoiceParm1_.add(value);
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList pitchChoiceParm2_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensurePitchChoiceParm2IsMutable() {
        if (!pitchChoiceParm2_.isModifiable()) {
          pitchChoiceParm2_ = new com.google.protobuf.LazyStringArrayList(pitchChoiceParm2_);
        }
        bitField0_ |= 0x00004000;
      }
      /**
       * <code>repeated string pitch_choice_parm2 = 15;</code>
       * @return A list containing the pitchChoiceParm2.
       */
      public com.google.protobuf.ProtocolStringList
          getPitchChoiceParm2List() {
        pitchChoiceParm2_.makeImmutable();
        return pitchChoiceParm2_;
      }
      /**
       * <code>repeated string pitch_choice_parm2 = 15;</code>
       * @return The count of pitchChoiceParm2.
       */
      public int getPitchChoiceParm2Count() {
        return pitchChoiceParm2_.size();
      }
      /**
       * <code>repeated string pitch_choice_parm2 = 15;</code>
       * @param index The index of the element to return.
       * @return The pitchChoiceParm2 at the given index.
       */
      public java.lang.String getPitchChoiceParm2(int index) {
        return pitchChoiceParm2_.get(index);
      }
      /**
       * <code>repeated string pitch_choice_parm2 = 15;</code>
       * @param index The index of the value to return.
       * @return The bytes of the pitchChoiceParm2 at the given index.
       */
      public com.google.protobuf.ByteString
          getPitchChoiceParm2Bytes(int index) {
        return pitchChoiceParm2_.getByteString(index);
      }
      /**
       * <code>repeated string pitch_choice_parm2 = 15;</code>
       * @param index The index to set the value at.
       * @param value The pitchChoiceParm2 to set.
       * @return This builder for chaining.
       */
      public Builder setPitchChoiceParm2(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensurePitchChoiceParm2IsMutable();
        pitchChoiceParm2_.set(index, value);
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string pitch_choice_parm2 = 15;</code>
       * @param value The pitchChoiceParm2 to add.
       * @return This builder for chaining.
       */
      public Builder addPitchChoiceParm2(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensurePitchChoiceParm2IsMutable();
        pitchChoiceParm2_.add(value);
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string pitch_choice_parm2 = 15;</code>
       * @param values The pitchChoiceParm2 to add.
       * @return This builder for chaining.
       */
      public Builder addAllPitchChoiceParm2(
          java.lang.Iterable<java.lang.String> values) {
        ensurePitchChoiceParm2IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pitchChoiceParm2_);
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string pitch_choice_parm2 = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitchChoiceParm2() {
        pitchChoiceParm2_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string pitch_choice_parm2 = 15;</code>
       * @param value The bytes of the pitchChoiceParm2 to add.
       * @return This builder for chaining.
       */
      public Builder addPitchChoiceParm2Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensurePitchChoiceParm2IsMutable();
        pitchChoiceParm2_.add(value);
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> tuning_ =
        java.util.Collections.emptyList();
      private void ensureTuningIsMutable() {
        if (!((bitField0_ & 0x00008000) != 0)) {
          tuning_ = new java.util.ArrayList<java.lang.Integer>(tuning_);
          bitField0_ |= 0x00008000;
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
       * @return A list containing the tuning.
       */
      public java.util.List<ItemDefInstrument.TuningType> getTuningList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, ItemDefInstrument.TuningType>(tuning_, tuning_converter_);
      }
      /**
       * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
       * @return The count of tuning.
       */
      public int getTuningCount() {
        return tuning_.size();
      }
      /**
       * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
       * @param index The index of the element to return.
       * @return The tuning at the given index.
       */
      public ItemDefInstrument.TuningType getTuning(int index) {
        return tuning_converter_.convert(tuning_.get(index));
      }
      /**
       * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
       * @param index The index to set the value at.
       * @param value The tuning to set.
       * @return This builder for chaining.
       */
      public Builder setTuning(
          int index, ItemDefInstrument.TuningType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTuningIsMutable();
        tuning_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
       * @param value The tuning to add.
       * @return This builder for chaining.
       */
      public Builder addTuning(ItemDefInstrument.TuningType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTuningIsMutable();
        tuning_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
       * @param values The tuning to add.
       * @return This builder for chaining.
       */
      public Builder addAllTuning(
          java.lang.Iterable<? extends ItemDefInstrument.TuningType> values) {
        ensureTuningIsMutable();
        for (ItemDefInstrument.TuningType value : values) {
          tuning_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.TuningType tuning = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearTuning() {
        tuning_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList tuningParm_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureTuningParmIsMutable() {
        if (!tuningParm_.isModifiable()) {
          tuningParm_ = new com.google.protobuf.LazyStringArrayList(tuningParm_);
        }
        bitField0_ |= 0x00010000;
      }
      /**
       * <code>repeated string tuning_parm = 17;</code>
       * @return A list containing the tuningParm.
       */
      public com.google.protobuf.ProtocolStringList
          getTuningParmList() {
        tuningParm_.makeImmutable();
        return tuningParm_;
      }
      /**
       * <code>repeated string tuning_parm = 17;</code>
       * @return The count of tuningParm.
       */
      public int getTuningParmCount() {
        return tuningParm_.size();
      }
      /**
       * <code>repeated string tuning_parm = 17;</code>
       * @param index The index of the element to return.
       * @return The tuningParm at the given index.
       */
      public java.lang.String getTuningParm(int index) {
        return tuningParm_.get(index);
      }
      /**
       * <code>repeated string tuning_parm = 17;</code>
       * @param index The index of the value to return.
       * @return The bytes of the tuningParm at the given index.
       */
      public com.google.protobuf.ByteString
          getTuningParmBytes(int index) {
        return tuningParm_.getByteString(index);
      }
      /**
       * <code>repeated string tuning_parm = 17;</code>
       * @param index The index to set the value at.
       * @param value The tuningParm to set.
       * @return This builder for chaining.
       */
      public Builder setTuningParm(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTuningParmIsMutable();
        tuningParm_.set(index, value);
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string tuning_parm = 17;</code>
       * @param value The tuningParm to add.
       * @return This builder for chaining.
       */
      public Builder addTuningParm(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTuningParmIsMutable();
        tuningParm_.add(value);
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string tuning_parm = 17;</code>
       * @param values The tuningParm to add.
       * @return This builder for chaining.
       */
      public Builder addAllTuningParm(
          java.lang.Iterable<java.lang.String> values) {
        ensureTuningParmIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tuningParm_);
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string tuning_parm = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearTuningParm() {
        tuningParm_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string tuning_parm = 17;</code>
       * @param value The bytes of the tuningParm to add.
       * @return This builder for chaining.
       */
      public Builder addTuningParmBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTuningParmIsMutable();
        tuningParm_.add(value);
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }

      private java.util.List<ItemDefInstrument.InstrumentRegister> registers_ =
        java.util.Collections.emptyList();
      private void ensureRegistersIsMutable() {
        if (!((bitField0_ & 0x00020000) != 0)) {
          registers_ = new java.util.ArrayList<ItemDefInstrument.InstrumentRegister>(registers_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ItemDefInstrument.InstrumentRegister, ItemDefInstrument.InstrumentRegister.Builder, ItemDefInstrument.InstrumentRegisterOrBuilder> registersBuilder_;

      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public java.util.List<ItemDefInstrument.InstrumentRegister> getRegistersList() {
        if (registersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(registers_);
        } else {
          return registersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public int getRegistersCount() {
        if (registersBuilder_ == null) {
          return registers_.size();
        } else {
          return registersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public ItemDefInstrument.InstrumentRegister getRegisters(int index) {
        if (registersBuilder_ == null) {
          return registers_.get(index);
        } else {
          return registersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public Builder setRegisters(
          int index, ItemDefInstrument.InstrumentRegister value) {
        if (registersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRegistersIsMutable();
          registers_.set(index, value);
          onChanged();
        } else {
          registersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public Builder setRegisters(
          int index, ItemDefInstrument.InstrumentRegister.Builder builderForValue) {
        if (registersBuilder_ == null) {
          ensureRegistersIsMutable();
          registers_.set(index, builderForValue.build());
          onChanged();
        } else {
          registersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public Builder addRegisters(ItemDefInstrument.InstrumentRegister value) {
        if (registersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRegistersIsMutable();
          registers_.add(value);
          onChanged();
        } else {
          registersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public Builder addRegisters(
          int index, ItemDefInstrument.InstrumentRegister value) {
        if (registersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRegistersIsMutable();
          registers_.add(index, value);
          onChanged();
        } else {
          registersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public Builder addRegisters(
          ItemDefInstrument.InstrumentRegister.Builder builderForValue) {
        if (registersBuilder_ == null) {
          ensureRegistersIsMutable();
          registers_.add(builderForValue.build());
          onChanged();
        } else {
          registersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public Builder addRegisters(
          int index, ItemDefInstrument.InstrumentRegister.Builder builderForValue) {
        if (registersBuilder_ == null) {
          ensureRegistersIsMutable();
          registers_.add(index, builderForValue.build());
          onChanged();
        } else {
          registersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public Builder addAllRegisters(
          java.lang.Iterable<? extends ItemDefInstrument.InstrumentRegister> values) {
        if (registersBuilder_ == null) {
          ensureRegistersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, registers_);
          onChanged();
        } else {
          registersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public Builder clearRegisters() {
        if (registersBuilder_ == null) {
          registers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          registersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public Builder removeRegisters(int index) {
        if (registersBuilder_ == null) {
          ensureRegistersIsMutable();
          registers_.remove(index);
          onChanged();
        } else {
          registersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public ItemDefInstrument.InstrumentRegister.Builder getRegistersBuilder(
          int index) {
        return getRegistersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public ItemDefInstrument.InstrumentRegisterOrBuilder getRegistersOrBuilder(
          int index) {
        if (registersBuilder_ == null) {
          return registers_.get(index);  } else {
          return registersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public java.util.List<? extends ItemDefInstrument.InstrumentRegisterOrBuilder>
           getRegistersOrBuilderList() {
        if (registersBuilder_ != null) {
          return registersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(registers_);
        }
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public ItemDefInstrument.InstrumentRegister.Builder addRegistersBuilder() {
        return getRegistersFieldBuilder().addBuilder(
            ItemDefInstrument.InstrumentRegister.getDefaultInstance());
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public ItemDefInstrument.InstrumentRegister.Builder addRegistersBuilder(
          int index) {
        return getRegistersFieldBuilder().addBuilder(
            index, ItemDefInstrument.InstrumentRegister.getDefaultInstance());
      }
      /**
       * <code>repeated .ItemDefInstrument.InstrumentRegister registers = 18;</code>
       */
      public java.util.List<ItemDefInstrument.InstrumentRegister.Builder>
           getRegistersBuilderList() {
        return getRegistersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ItemDefInstrument.InstrumentRegister, ItemDefInstrument.InstrumentRegister.Builder, ItemDefInstrument.InstrumentRegisterOrBuilder>
          getRegistersFieldBuilder() {
        if (registersBuilder_ == null) {
          registersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ItemDefInstrument.InstrumentRegister, ItemDefInstrument.InstrumentRegister.Builder, ItemDefInstrument.InstrumentRegisterOrBuilder>(
                  registers_,
                  ((bitField0_ & 0x00020000) != 0),
                  getParentForChildren(),
                  isClean());
          registers_ = null;
        }
        return registersBuilder_;
      }

      private java.lang.Object description_ = "";
      /**
       * <code>optional string description = 19;</code>
       * @return Whether the description field is set.
       */
      public boolean hasDescription() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <code>optional string description = 19;</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            description_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string description = 19;</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string description = 19;</code>
       * @param value The description to set.
       * @return This builder for chaining.
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        description_ = value;
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>optional string description = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearDescription() {
        description_ = getDefaultInstance().getDescription();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }
      /**
       * <code>optional string description = 19;</code>
       * @param value The bytes for description to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        description_ = value;
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ItemDefInstrument.InstrumentDef)
    }

    // @@protoc_insertion_point(class_scope:ItemDefInstrument.InstrumentDef)
    private static final ItemDefInstrument.InstrumentDef DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ItemDefInstrument.InstrumentDef();
    }

    public static ItemDefInstrument.InstrumentDef getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<InstrumentDef>
        PARSER = new com.google.protobuf.AbstractParser<InstrumentDef>() {
      @java.lang.Override
      public InstrumentDef parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<InstrumentDef> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstrumentDef> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public ItemDefInstrument.InstrumentDef getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ItemdefInstrument_InstrumentFlags_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ItemdefInstrument_InstrumentFlags_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ItemdefInstrument_InstrumentPiece_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ItemdefInstrument_InstrumentPiece_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ItemdefInstrument_InstrumentRegister_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ItemdefInstrument_InstrumentRegister_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ItemdefInstrument_InstrumentDef_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ItemdefInstrument_InstrumentDef_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\027ItemdefInstrument.proto\022\021ItemdefInstru" +
      "ment\"\314\001\n\017InstrumentFlags\022\030\n\020indefinite_p" +
      "itch\030\001 \001(\010\022\032\n\022placed_as_building\030\002 \001(\010\022\021" +
      "\n\tmetal_mat\030\003 \001(\010\022\021\n\tstone_mat\030\004 \001(\010\022\020\n\010" +
      "wood_mat\030\005 \001(\010\022\021\n\tglass_mat\030\006 \001(\010\022\023\n\013cer" +
      "amic_mat\030\007 \001(\010\022\021\n\tshell_mat\030\010 \001(\010\022\020\n\010bon" +
      "e_mat\030\t \001(\010\"N\n\017InstrumentPiece\022\014\n\004type\030\001" +
      " \001(\t\022\n\n\002id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\023\n\013name_p" +
      "lural\030\004 \001(\t\"F\n\022InstrumentRegister\022\027\n\017pit" +
      "ch_range_min\030\001 \001(\005\022\027\n\017pitch_range_max\030\002 " +
      "\001(\005\"\221\005\n\rInstrumentDef\0221\n\005flags\030\001 \001(\0132\".I" +
      "temdefInstrument.InstrumentFlags\022\014\n\004size" +
      "\030\002 \001(\005\022\r\n\005value\030\003 \001(\005\022\025\n\rmaterial_size\030\004" +
      " \001(\005\0222\n\006pieces\030\005 \003(\0132\".ItemDefInstrument" +
      ".InstrumentPiece\022\027\n\017pitch_range_min\030\006 \001(" +
      "\005\022\027\n\017pitch_range_max\030\007 \001(\005\022\025\n\rvolume_mb_" +
      "min\030\010 \001(\005\022\025\n\rvolume_mb_max\030\t \001(\005\022@\n\020soun" +
      "d_production\030\n \003(\0162&.ItemDefInstrument.S" +
      "oundProductionType\022\036\n\026sound_production_p" +
      "arm1\030\013 \003(\t\022\036\n\026sound_production_parm2\030\014 \003" +
      "(\t\0228\n\014pitch_choice\030\r \003(\0162\".ItemdefInstru" +
      "ment.PitchChoiceType\022\032\n\022pitch_choice_par" +
      "m1\030\016 \003(\t\022\032\n\022pitch_choice_parm2\030\017 \003(\t\022-\n\006" +
      "tuning\030\020 \003(\0162\035.ItemDefInstrument.TuningT" +
      "ype\022\023\n\013tuning_parm\030\021 \003(\t\0228\n\tregisters\030\022 " +
      "\003(\0132%.ItemDefInstrument.InstrumentRegist" +
      "er\022\023\n\013description\030\023 \001(\t*\371\001\n\017PitchChoiceT" +
      "ype\022\025\n\021MEMBRANE_POSITION\020\000\022\022\n\016SUBPART_CH" +
      "OICE\020\001\022\014\n\010KEYBOARD\020\002\022\021\n\rSTOPPING_FRET\020\003\022" +
      "\031\n\025STOPPING_AGAINST_BODY\020\004\022\021\n\rSTOPPING_H" +
      "OLE\020\005\022\025\n\021STOPPING_HOLE_KEY\020\006\022\t\n\005SLIDE\020\007\022" +
      "\023\n\017HARMONIC_SERIES\020\010\022\024\n\020VALVE_ROUTES_AIR" +
      "\020\t\022\016\n\nBP_IN_BELL\020\n\022\017\n\013FOOT_PEDALS\020\013*\276\003\n\023" +
      "SoundProductionType\022\021\n\rPLUCKED_BY_BP\020\000\022\013" +
      "\n\007PLUCKED\020\001\022\t\n\005BOWED\020\002\022\020\n\014STRUCK_BY_BP\020\003" +
      "\022\n\n\006STRUCK\020\004\022\036\n\032VIBRATE_BP_AGAINST_OPENI" +
      "NG\020\005\022\027\n\023BLOW_AGAINST_FIPPLE\020\006\022\032\n\026BLOW_OV" +
      "ER_OPENING_SIDE\020\007\022\031\n\025BLOW_OVER_OPENING_E" +
      "ND\020\010\022\031\n\025BLOW_OVER_SINGLE_REED\020\t\022\031\n\025BLOW_" +
      "OVER_DOUBLE_REED\020\n\022\027\n\023BLOW_OVER_FREE_REE" +
      "D\020\013\022\023\n\017STRUCK_TOGETHER\020\014\022\n\n\006SHAKEN\020\r\022\013\n\007" +
      "SCRAPED\020\016\022\014\n\010FRICTION\020\017\022\r\n\tRESONATOR\020\020\022\021" +
      "\n\rBAG_OVER_REED\020\021\022\021\n\rAIR_OVER_REED\020\022\022\026\n\022" +
      "AIR_OVER_FREE_REED\020\023\022\026\n\022AIR_AGAINST_FIPP" +
      "LE\020\024*V\n\nTuningType\022\010\n\004PEGS\020\000\022\026\n\022ADJUSTAB" +
      "LE_BRIDGES\020\001\022\n\n\006CROOKS\020\002\022\016\n\nTIGHTENING\020\003" +
      "\022\n\n\006LEVERS\020\004B\002H\003"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_ItemdefInstrument_InstrumentFlags_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ItemdefInstrument_InstrumentFlags_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ItemdefInstrument_InstrumentFlags_descriptor,
        new java.lang.String[] { "IndefinitePitch", "PlacedAsBuilding", "MetalMat", "StoneMat", "WoodMat", "GlassMat", "CeramicMat", "ShellMat", "BoneMat", });
    internal_static_ItemdefInstrument_InstrumentPiece_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_ItemdefInstrument_InstrumentPiece_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ItemdefInstrument_InstrumentPiece_descriptor,
        new java.lang.String[] { "Type", "Id", "Name", "NamePlural", });
    internal_static_ItemdefInstrument_InstrumentRegister_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_ItemdefInstrument_InstrumentRegister_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ItemdefInstrument_InstrumentRegister_descriptor,
        new java.lang.String[] { "PitchRangeMin", "PitchRangeMax", });
    internal_static_ItemdefInstrument_InstrumentDef_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_ItemdefInstrument_InstrumentDef_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ItemdefInstrument_InstrumentDef_descriptor,
        new java.lang.String[] { "Flags", "Size", "Value", "MaterialSize", "Pieces", "PitchRangeMin", "PitchRangeMax", "VolumeMbMin", "VolumeMbMax", "SoundProduction", "SoundProductionParm1", "SoundProductionParm2", "PitchChoice", "PitchChoiceParm1", "PitchChoiceParm2", "Tuning", "TuningParm", "Registers", "Description", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
